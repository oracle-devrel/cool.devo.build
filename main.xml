<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator>
  <link href="https://cool.devo.build/main.xml" rel="self" type="application/atom+xml" />
  <link href="https://cool.devo.build/" rel="alternate" type="text/html" />
  <updated>2023-01-17T15:45:44+00:00</updated>
  <id>https://cool.devo.build/main.xml</id>

  

  
    <title type="html">Oracle Developer Tutorials</title>
  

  
    <subtitle>Cool stuff from Oracle's Developer Relations team</subtitle>
  

  
    <author>
        <name>Oracle Developer Community</name>
      
      
    </author>
  

  
  
  
  
  
    <entry>
      

      <title type="html">Getting started with Rust</title>
      <link href="https://cool.devo.build/tutorials/rust-on-oci/rust-getting-started" rel="alternate" type="text/html" title="Getting started with Rust" />
      <published>2022-12-12T08:00:00+00:00</published>
      <updated>2022-12-12T08:00:00+00:00</updated>
      <id>https://cool.devo.build/tutorials/rust-on-oci/rust-getting-started</id>
      
      
        <content type="html" xml:base="https://cool.devo.build/tutorials/rust-on-oci/rust-getting-started">&lt;p&gt;{% imgx alignleft 250 250 media/image2.png “Rust Logo” “Rust Logo” %}
{% imgx alignleft 250 250 media/image1.png “Rust Cargo Logo” “Rust Cargo Logo” %}
{% imgx alignleft 250 250 media/image4.png “Ferris the crab, unofficial mascot” “Ferris the crab, unofficial mascot” %}&lt;/p&gt;

&lt;p&gt;Welcome to a series of posts on “Everything you need to know about Rust.” We’ll cover a lot over the course of the next few articles. By the end, you should be comfortable with writing and deploying your own Rust project and be ready to jump into advanced topics.&lt;/p&gt;

&lt;p&gt;This first article will introduce you to the motivations behind Rust, why you might use Rust, and a walkthrough of a simple Rust application deployed to Oracle Cloud Infrastructure. Later articles will cover the ecosystem and full suite of Rust tools, publishing Rust libraries (known as “crates”), and best practices and resources for becoming a Rust expert.&lt;/p&gt;

&lt;p&gt;Let’s kick it off with a few fundamentals.&lt;/p&gt;

&lt;h2 id=&quot;what-is-rust&quot;&gt;What Is Rust?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Rust&lt;/strong&gt; is a general-purpose programming language developed&lt;/p&gt;

&lt;p&gt;specifically to run blazingly fast, enforce type safety, and provide concurrency, all in an easier-to-use language than its predecessors, such as C and C++. It’s a relatively new language, with version 1.0 released in 2015.&lt;/p&gt;

&lt;p&gt;Rust enforces memory safety through &lt;a href=&quot;https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html&quot;&gt;its unique ownership system&lt;/a&gt;, which ensures that all resources are properly initialized and cleaned up, preventing you from using a resource before it has been initialized or after it has been freed. By enforcing such strict memory guarantees, Rust programs don’t need to be garbage-collected. Rust also has &lt;a href=&quot;https://doc.rust-lang.org/book/ch16-00-concurrency.html&quot;&gt;strong support for multithreading&lt;/a&gt;. In other languages, multithreading can lead to concurrency problems such as resource deadlocks. But by using the ownership system, Rust tracks and catches potential data races at &lt;em&gt;compile time&lt;/em&gt;, making it much easier to write safe, concurrent code.&lt;/p&gt;

&lt;p&gt;Many of Rust’s goals are closely aligned with &lt;a href=&quot;https://www.oracle.com/cloud/why-oci/&quot;&gt;Oracle Cloud Infrastructure (OCI)&lt;/a&gt;, which makes the two technologies a great pair if you’re looking to provide greater security, performance, &lt;em&gt;and&lt;/em&gt; flexibility to your development projects.&lt;/p&gt;

&lt;h2 id=&quot;why-use-rust&quot;&gt;Why Use Rust?&lt;/h2&gt;

&lt;p&gt;While Rust is definitely a general-purpose language, there are some common use cases where it truly shines.&lt;/p&gt;

&lt;p&gt;First are &lt;strong&gt;&lt;a href=&quot;https://www.rust-lang.org/what/networking&quot;&gt;networking&lt;/a&gt; and &lt;a href=&quot;https://www.rust-lang.org/what/embedded&quot;&gt;embedded&lt;/a&gt; devices.&lt;/strong&gt; One of the main motivators for Rust’s development was to create a language that would be suitable for use in systems programming contexts, such as operating systems, device drivers, and embedded systems. Since well-written Rust applications have a small footprint and writing safe, concurrent code is a basic part of developing in the language, Rust is perfect for low-resource deployments that are often found in both of these spaces.&lt;/p&gt;

&lt;p&gt;Next, since Rust became prominent when Mozilla sponsored it during a high point of web development, it should be no surprise that Rust has great &lt;strong&gt;web-related applications&lt;/strong&gt;. Whether you need to have all the benefits of the language on the front end or back end of your web stack, you can use Rust.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For front-end functionality that needs high performance, developers often build in Rust and &lt;a href=&quot;https://www.rust-lang.org/what/wasm&quot;&gt;compile to WebAssembly&lt;/a&gt; to run in a browser. With client-side code that is known to be safe, you can be more certain of success for whatever high-performance tasks you need.&lt;/li&gt;
  &lt;li&gt;For back-end applications, Rust has several web frameworks, such as &lt;a href=&quot;https://actix.rs&quot;&gt;Actix Web&lt;/a&gt; and &lt;a href=&quot;https://rocket.rs&quot;&gt;Rocket&lt;/a&gt;, that can provide the tools and libraries you need to quickly spin up fast and secure web applications that take advantage of Rust.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, Rust is also great for &lt;strong&gt;&lt;a href=&quot;https://www.rust-lang.org/what/cli&quot;&gt;building command-line tools&lt;/a&gt;&lt;/strong&gt;. With its easy distribution model (via &lt;a href=&quot;https://crates.io&quot;&gt;crates.io&lt;/a&gt;, its package distributor) and the ability to run on many different CPU architectures, Rust allows safety and performance without having to worry about the intricacies of its deployment environment.&lt;/p&gt;

&lt;h2 id=&quot;how-is-rust-different-from-javascript&quot;&gt;How Is Rust Different from JavaScript?&lt;/h2&gt;

&lt;p&gt;You may be wondering how Rust is different from JavaScript or other scripting languages. There are a few key differences to consider.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, Rust is a statically typed language, while JavaScript is dynamically typed. This means that in Rust, you have to declare the types of variables ahead of time, while in JavaScript, you don’t need to do this.&lt;/li&gt;
  &lt;li&gt;Second, Rust is compiled to native code, while JavaScript is interpreted by a virtual machine. This means that Rust programs will generally run faster than JavaScript programs, but they may take longer to compile.&lt;/li&gt;
  &lt;li&gt;Finally, Rust has several features that make it more suitable for use in systems programming contexts than JavaScript. These include its focus on safety and security, its low-level control over memory management and data layout, and its support for efficient code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lets-see-it-in-action&quot;&gt;Let’s See It in Action&lt;/h2&gt;

&lt;p&gt;Now that we have some background, let’s get Rust up and running on an OCI instance and see how easy it can be to get started.&lt;/p&gt;

&lt;p&gt;If you don’t have an OCI account, the first step is to create one. For simplicity and ease of following along, we’ll start with &lt;a href=&quot;https://www.oracle.com/cloud/free/&quot;&gt;an Always Free Instance&lt;/a&gt; and create a simple Actix web app. This app will be very similar to a demo Express.js application. It’s a single-file app that responds with a greeting on a couple of GET routes and will echo the payload sent via POST on another route.&lt;/p&gt;

&lt;p&gt;Everything we use here is free, so no worries about costs.&lt;/p&gt;

&lt;h3 id=&quot;in-order-to-bake-a-rust-app-you-must-first-invent-a-computing-universe&quot;&gt;In order to bake a Rust app, you must first invent a computing universe&lt;/h3&gt;

&lt;p&gt;If you really wanted to go quickly, you could start by creating a bare Linux instance on OCI, install Rust, then build your Actix app. However, if you want to be able to access your app from the internet, or do more than just write to the local drive, there’s a bit more involved.&lt;/p&gt;

&lt;p&gt;We’ll walk through the relevant steps below, but if you need more detailed information, check &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/GSG/Reference/overviewworkflow.htm#Tutorial__Launching_Your_First_Linux_Instance&quot;&gt;this more thorough
tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;initial-setup&quot;&gt;Initial setup&lt;/h4&gt;

&lt;p&gt;Our first step is to &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/GSG/Tasks/choosingcompartments.htm#Choosing_a_Compartment&quot;&gt;choose a compartment&lt;/a&gt; where we’ll put this sample app. If you’ve never created a compartment before, you’ll have a default “root” compartment for your account, but it’s a better idea to create a new one. We won’t be creating much for this article, but having a dedicated compartment will make cleanup easier. It’s simple to create one, so we’ll make a sandbox compartment from the Identity &amp;amp; Security menu.&lt;/p&gt;

&lt;p&gt;{% imgx media/image8.png %}&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Choose “Compartments” from the menu for Identity &amp;amp; Security&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once you get to the list of compartments, you can make a new one and fill in these details (or something like them), but keep the Parent Compartment set to your root compartment.&lt;/p&gt;

&lt;p&gt;{% imgx media/image3.png %}&lt;/p&gt;

&lt;p&gt;Now that you have a compartment that won’t cause problems for other things in the rest of your account, let’s get to work.&lt;/p&gt;

&lt;h4 id=&quot;an-internet-accessible-network&quot;&gt;An internet accessible network&lt;/h4&gt;

&lt;p&gt;In any new OCI account, you’ll start with a purely private network. This means that any resources you create will be able to talk to one another, but by default, none of them will be accessible to the rest of the internet.&lt;/p&gt;

&lt;p&gt;Since we’re building a web app, that simply won’t work for our needs, so we’re going to need to create &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/GSG/Tasks/creatingnetwork.htm#Creating_a_Virtual_Cloud_Network&quot;&gt;an internet-connected Virtual Cloud Network&lt;/a&gt;. OCI is designed to get us up and running quickly and offers just what we need through a convenient wizard on the networking page.&lt;/p&gt;

&lt;p&gt;If you choose our sandbox compartment from the sidebar and click the “Start VCN Wizard” button, you’ll see something like this.&lt;/p&gt;

&lt;p&gt;{% imgx media/image7.png %}&lt;/p&gt;

&lt;p&gt;Start the wizard and pick a name for your network (e.g. RustNet or whatever you feel like). Leave the CIDR blocks and other settings alone, then click next.&lt;/p&gt;

&lt;p&gt;{% imgx media/image5.png %}&lt;/p&gt;

&lt;p&gt;You should see a number of gateways that will be created, as well as some security lists and route tables. Click create and watch OCI do its work.&lt;/p&gt;

&lt;p&gt;While you’re here, open the Default Security List from the Security Lists tab and add a rule to allow traffic on port 8080 to your VNC. The settings should look like this:&lt;/p&gt;

&lt;p&gt;{% imgx media/image6.png %}&lt;/p&gt;

&lt;h4 id=&quot;building-our-compute-instance&quot;&gt;Building our compute instance&lt;/h4&gt;

&lt;p&gt;Now we get to &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/GSG/Tasks/launchinginstance.htm#Launching_a_Linux_Instance&quot;&gt;make our computer&lt;/a&gt; for building a Rust app. We’ll use the basic defaults (they’re set to use the Always Free options), and we’ll download the SSH key that’s generated with our instance. The defaults are good enough for our purposes, so once you’ve given your instance a name and have checked that your VCN is being used for this instance, just click the Create button.&lt;/p&gt;

&lt;p&gt;Once your instance has been provisioned, grab the IP address and get ready to start working in the cloud!&lt;/p&gt;

&lt;h3 id=&quot;getting-up-and-running-with-rust&quot;&gt;Getting up and running with Rust&lt;/h3&gt;

&lt;p&gt;By default, Rust is not installed in OCI instances. However, just as OCI is designed for ease of use and setup, Rust is constantly striving for developer efficiency, and the setup process is no exception. The rustup command is designed to make setting up Rust as painless as possible.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.rust-lang.org/tools/install&quot;&gt;Grab the installation command from the docs&lt;/a&gt;, and run it on your OCI instance. When you see “Rust is installed now. Great!” you’re ready to go, with a full Rust tool suite installed. These tools include rustup itself, which will allow you to maintain your Rust tools in the future, rustc, which is the Rust compiler, and cargo, which serves as Rust’s package manager. Cargo has many other uses too, including making new Rust apps and libraries from scratch.&lt;/p&gt;

&lt;p&gt;Make sure to check if there are any instructions to get your current shell configured properly. If there are, run those commands. If you like, you can verify that everything was installed correctly with:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;rustc --version
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This should give you the most recent and stable version of Rust.&lt;/p&gt;

&lt;h3 id=&quot;configuring-our-app&quot;&gt;Configuring our app&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://actix.rs/docs/getting-started/&quot;&gt;Getting a new Actix app going&lt;/a&gt; is pretty straightforward. You start, as you do with many Rust projects, with:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;cargo new hello-rust
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Cargo&lt;/strong&gt; is Rust’s dependency and app manager. It’s very similar to npm
for Node, Ruby’s bundler tool, or PyPI for Python. In our case, it only
creates a couple things for us. In a new directory called hello-rust,
Cargo will have created the following structure:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hello-rust\
├── Cargo.toml\
└── src\
└── main.rs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In Rust, packages are called crates. The Cargo.toml file serves as a package manifest) and the src/main.rs file is our main source file. We won’t need anything other than these two files for our Actix app.&lt;/p&gt;

&lt;p&gt;In the Cargo.toml file, add the following line to the [dependencies] section:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[dependencies]
actix-web = &quot;4&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Save your Cargo file and open the src/main.rs file. Replace what’s there with:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;actix_web&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Responder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[get(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Responder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, Rust!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[post(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/echo&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req_body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Responder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req_body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;manual_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Responder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hey there!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[actix_web::main]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;HttpServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/hey&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manual_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;.await&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This might feel like a lot, but with just the actix-web dependency and these few lines of code, we now have a fully functioning Rust web app.&lt;/p&gt;

&lt;p&gt;This code, in the main function, is building an HTTP server that attaches to port 8080 of your instance. That server has two “services”&lt;/p&gt;

&lt;p&gt;defined as asynchronous functions which will respond with a greeting at the root route with a GET or echo back a response at the /echo route. We’ve also established a third route manually with the .route call for the manual_hello function. Because all of these are defined using the async keyword, the app can respond to multiple requests at once as long as there are threads available. What’s nice is that we know the app is not going to have any memory safety issues because it compiles without errors.&lt;/p&gt;

&lt;p&gt;We’ve already opened a rule on our network to allow traffic over port 8080, but we also need to open port 8080 in our firewall to allow traffic through, so run these two commands:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;firewall-cmd &lt;span class=&quot;nt&quot;&gt;--permanent&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--zone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;public &lt;span class=&quot;nt&quot;&gt;--add-port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8080/tcp
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;firewall-cmd &lt;span class=&quot;nt&quot;&gt;--reload&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Return to the root of your app and run:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;cargo run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once you do, your application will build and start running.&lt;/p&gt;

&lt;p&gt;If you grab the IP address of your instance and append port 8080, you should be able to get a “Hello, Rust!” from your browser. If you’d like to be a little more adventurous, you could send a POST to the /echo endpoint and get the request body you send echoed back. We’ve also manually set up a special hello at the /hey route. All of this in under 30 lines of Rust!&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;There’s a lot more to learn, but hopefully you can see the power and ease of using Rust and OCI together. Future articles will dive deeper into Rust and the ecosystem. In the meantime, you might also enjoy getting a taste of what Rust can do by checking out &lt;a href=&quot;https://doc.rust-lang.org/book/title-page.html&quot;&gt;The Rust Programming Language&lt;/a&gt;, affectionately referred to by Rust programmers as “The Book.” Alternatively, you can keep poking around with some of &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/GSG/Concepts/baremetalintro.htm&quot;&gt;the amazing things you can do on OCI&lt;/a&gt; with the free trial credits you got for creating a new Oracle Cloud account.&lt;/p&gt;</content>
      

      
      
      
      
      

      <author>
          <name>Oracle Developers</name>
        
        
      </author>

      
        
          <category term="clouddev" />
        
          <category term="cloudapps" />
        
      

      
        <category term="open-source" />
      
        <category term="devops" />
      
        <category term="get-started" />
      
        <category term="back-end" />
      
        <category term="rust" />
      
      <summary type="html">The beginning of a series on building applications using the Rust programming language.</summary>

      
      
    </entry>
  
    <entry>
      

      <title type="html">Building an API in Rust and hosting on Oracle Cloud Infrastructure</title>
      <link href="https://cool.devo.build/tutorials/rust-on-oci/rust-building-an-api" rel="alternate" type="text/html" title="Building an API in Rust and hosting on Oracle Cloud Infrastructure" />
      <published>2022-12-12T08:00:00+00:00</published>
      <updated>2022-12-12T08:00:00+00:00</updated>
      <id>https://cool.devo.build/tutorials/rust-on-oci/rust-building-an-api</id>
      
      
        <content type="html" xml:base="https://cool.devo.build/tutorials/rust-on-oci/rust-building-an-api">&lt;p&gt;It’s impossible to work in cloud services without hearing about Rust, the system’s programming language from Mozilla. It’s used all over the internet by companies like &lt;a href=&quot;https://blog.cloudflare.com/workers-rust-sdk/&quot;&gt;Cloudflare&lt;/a&gt;, &lt;a href=&quot;https://engineering.fb.com/2021/04/29/developer-tools/rust/&quot;&gt;Facebook&lt;/a&gt;, and &lt;a href=&quot;https://discord.com/blog/why-discord-is-switching-from-go-to-rust&quot;&gt;Discord&lt;/a&gt;. It’s a strongly-typed yet flexible language that emphasizes strict guidelines around memory usage, making it blazing fast and resource lean. The language also focuses on developer productivity, which is evident in their tooling and &lt;a href=&quot;https://crates.io/&quot;&gt;package ecosystems&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Rust is being used in places where C worked best, due in part to its recognizable syntax. It is also replacing some higher-level languages, like Node and Ruby. In this blog post, we will build a small API microservice using Rust. APIs are generally used in situations where services—a server and a client—must communicate with each other. Our API will represent the backend for an inventory bookstore, where books can be added, fetched, and removed.&lt;/p&gt;

&lt;p&gt;This app will be hosted on Oracle Cloud Infrastructure (OCI). OCI enables cloud-native containers to run in highly secure and performant environments that are also fully managed. This makes it a perfect match to host Rust applications, since the platform and the language are well-suited to solve similar problems.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;Before getting started, you’ll need to install several software packages.&lt;/p&gt;

&lt;p&gt;First, you’ll need Rust. Regardless of your operating system, &lt;a href=&quot;https://rustup.rs&quot;&gt;the Rustup script&lt;/a&gt; is guaranteed to work and installs all the necessary tools you need to start building a Rust application. You’ll also need to install &lt;a href=&quot;https://www.docker.com&quot;&gt;Docker&lt;/a&gt; to test the app containerization locally.&lt;/p&gt;

&lt;p&gt;In order to deploy the app online, you’ll also need &lt;a href=&quot;https://www.oracle.com/cloud/free/?source=CloudFree_CTA1_Default&amp;amp;intcmp=CloudFree_CTA1_Default&quot;&gt;a free OCI account&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;getting-started-with-the-rust-code&quot;&gt;Getting started with the Rust code&lt;/h2&gt;

&lt;p&gt;As with many programming languages, Rust comes with its own package management system called &lt;a href=&quot;https://crates.io&quot;&gt;Crates&lt;/a&gt;. To start building our app, we will want an HTTP web framework to do the heavy lifting for us. There are many to choose from, but we’ll use &lt;a href=&quot;https://github.com/seanmonstar/warp&quot;&gt;warp&lt;/a&gt;, as it’s both popular and performant. Just as Node uses package.json to manage packages, Rust uses Cargo.toml.&lt;/p&gt;

&lt;p&gt;Create a new directory within which you can start building this project, and create a file named Cargo.toml in it. Paste these lines into that file:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[package]
name = &quot;server&quot;
version = &quot;0.1.0&quot;
license = &quot;MIT&quot;
edition = &quot;2018&quot;

[dependencies]
tokio = { version = &quot;1&quot;, features = [&quot;full&quot;] }
warp = &quot;0.3&quot;
serde = { version = &quot;1&quot;, features = [&quot;derive&quot;]}
serde_json = &quot;1.0&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, we’re defining the general metadata of our package. We’re specifying that we want to create a binary executable named server; we also have a list of dependencies that our project needs, including warp.&lt;/p&gt;

&lt;p&gt;Next, create a directory called src, and a directory called bin within that. Then, create a file called server.rs, and paste these lines into it:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;#![deny(warnings)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[tokio::main]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Match any request and return hello world!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(||&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;serve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;.await&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ve defined a very basic Warp server, which will run on &lt;a href=&quot;http://127.0.0.1:3000&quot;&gt;http://127.0.0.1:3000&lt;/a&gt;. When a user visits that page, they’ll see a greeting. Go ahead and type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cargo run&lt;/code&gt; on the terminal. Cargo will download all the dependencies you defined, then it’ll compile them together with the server.rs file to create an executable. (All of that in just one command!) When it’s finished, you’ll see the following message:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;cargo run
&lt;span class=&quot;go&quot;&gt;Finished dev [unoptimized + debuginfo] target(s) **in** 0.06s
Running `target/debug/server`
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Navigate your browser window to &lt;a href=&quot;http://127.0.0.1:3000&quot;&gt;http://127.0.0.1:3000&lt;/a&gt;, which should show the greeting, thus confirming that the initial project setup has worked!&lt;/p&gt;

&lt;h2 id=&quot;setting-up-an-api&quot;&gt;Setting up an API&lt;/h2&gt;

&lt;p&gt;Now that we have verified that our server runs correctly, it’s time to build a more proper API. We want our API to get a list of books, add a new book, and remove a book.&lt;/p&gt;

&lt;p&gt;In a future blog, we will integrate with a backend database for storing and querying the data. To keep things simple in this tutorial, we’ll just fake the data store by defining an array to store all of our books.&lt;/p&gt;

&lt;p&gt;Let’s start by defining the structure of a Book. Rust has the concept of structs, which are akin to lightweight classes. Here’s an example of what our Book class would look like:&lt;/p&gt;

&lt;p&gt;(All the code below replaces the code in the server.rs file.)&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;serde&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Deserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;                                  
                                                                     
&lt;span class=&quot;nd&quot;&gt;#[derive(Clone,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Serialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize)]&lt;/span&gt;                            
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                                  
  &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                                                       
  &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can then modify our main function to immediately set up a basic catalog of books that follow this structure. We will use a vector (which is like an expandable array), and store the list in memory:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tokio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[tokio::main]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book_catalog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;book_catalog&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;The Hitchhiker's Guide to the Galaxy&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Douglas Adams&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1979&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;book_catalog&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;The Restaurant at the End of the Universe&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Douglas Adams&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1980&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;book_catalog&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Life, the Universe and Everything&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Douglas Adams&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1982&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;book_catalog&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;So Long, and Thanks for All the Fish&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Douglas Adams&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1984&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;book_catalog&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Mostly Harmless&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Douglas Adams&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1992&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book_catalog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So far, so good? Right on!&lt;/p&gt;

&lt;p&gt;The next task is to add routes to this API. There are a number of patterns to implement this, but the one suggested by Warp takes a two-pronged approach: First, the routes are defined, and then, the implementation of those routes is defined. This way, the implementation can change, but the route information can be considered static and stable.&lt;/p&gt;

&lt;p&gt;Let’s go ahead and define these routes. We’ll drop the code first, and then provide a closer examination:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filters&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Infallible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;cd&quot;&gt;/// The routes, combined.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;construct_book_routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Extract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rejection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Clone&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;route_get_books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;.or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;route_post_books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;.or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;route_delete_book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cd&quot;&gt;/// GET /books&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;route_get_books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Extract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rejection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Clone&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;path!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;books&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;.and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;.and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;.and_then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cd&quot;&gt;/// POST /books with JSON body&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;route_post_books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Extract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rejection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Clone&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;path!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;books&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;.and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;.and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;json_body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;.and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;.and_then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cd&quot;&gt;/// DELETE /books/:id&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;route_delete_book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Extract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rejection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Clone&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;path!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;books&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;.and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;.and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;.and_then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete_book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;with_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Extract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Infallible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Clone&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;json_body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Extract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rejection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Clone&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// When accepting a body, we want a JSON body&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;content_length_limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This might look like a lot of code, but we’re really just redefining similar path structures in composite functions. Let’s take a look at the first function:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cd&quot;&gt;/// The routes, combined.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;construct_book_routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Extract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rejection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Clone&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;route_get_books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;route_post_books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;route_delete_book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The only responsibility of construct_book_routes is to assemble a list of all the known routes. To make use of this, we must go back into our main function and change the final lines to look something like this:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;serve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;filters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;construct_book_routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;.run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;.await&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, we’re telling the warp server what our routes are, and passing along the in-memory DB we’ve created.&lt;/p&gt;

&lt;p&gt;Moving on to the next function:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;cd&quot;&gt;/// GET /books&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;route_get_books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Extract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rejection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Clone&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;path!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;books&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;.and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;.and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;.and_then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can ignore the function signature, as that’s largely Warp specific requirements. Instead, let’s look at the function line by line:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;We’re creating a path called /books&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This path responds to GET requests&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It makes use of the database we’re passing it&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;And the actual logic is stored in a to-be-written function called get_books, within the handler’s namespace&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The other two routes define POST and DELETE, which follow a very similar pattern. Let’s move on to the logical implementation:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handlers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Infallible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
  &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Infallible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;.await&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
  &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Infallible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;.await&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;StatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CREATED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
  &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delete_book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Infallible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;.await&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.retain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;keep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;keep&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// If the vec is smaller, we found and deleted a book!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deleted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deleted&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// respond with a `204 No Content`, which means successful,&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;StatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NO_CONTENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;StatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NOT_FOUND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These routes don’t do much! The GET function prints a list of all the books available; the POST function takes a new book and adds it to the vector; and the DELETE function removes a book based on its index in the vector.&lt;/p&gt;

&lt;p&gt;(See the end of the article for the GitHub containing all this code.)&lt;/p&gt;

&lt;p&gt;Go ahead and type cargo run in the terminal. Your project will recompile, and when it’s finished, go ahead and enter curl &lt;a href=&quot;http://localhost:3000/books&quot;&gt;http://localhost:3000/books&lt;/a&gt; in another terminal window. You should see a list of your books, and you can note that the other HTTP verbs work, too!&lt;/p&gt;

&lt;h2 id=&quot;dockerizing-the-rust-server&quot;&gt;Dockerizing the Rust server&lt;/h2&gt;

&lt;p&gt;Now, we’re ready to take this project and containerize it via &lt;a href=&quot;https://www.docker.com&quot;&gt;Docker&lt;/a&gt;. Docker has evolved over the years to make this process extremely simple. The entire Dockerfile fits in less than a dozen lines of code:&lt;/p&gt;

&lt;div class=&quot;language-docker highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Using the Rust official image...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; rust:1.60&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Copy the files in your machine to the Docker image...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ./ ./&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Build your program for release...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;cargo build &lt;span class=&quot;nt&quot;&gt;--release&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# And run the binary!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;./target/release/server&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ll need to build the Docker container, which we can run with this command:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;docker build -t server .
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And finally, we’ll need to start the Docker container, which can be done like this:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;docker run -p 3000:3000 --rm --name server_docker server*
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you haven’t seen the command for running a Docker container, then it’s worth pointing out several things about the CLI flags. First, we’re exposing port 3000 in our container to our localhost, as 3000. We could change these values if there were port number conflicts between our host machine and the Docker container, however, in this tutorial, that’s not necessary. We’re also naming our Docker as server_docker. This will make it easier to distinguish between logs and other systems’ processes.&lt;/p&gt;

&lt;p&gt;After the Docker run command executes, try running the curl command again. You &lt;em&gt;might&lt;/em&gt; see the following error:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl: (7) Failed to connect to localhost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What does it mean? Well, when Docker launches the container, it assigns it its own IP address. And when the Rust server points to 127.0.0.1, it’s opening a connection to &lt;em&gt;itself&lt;/em&gt;, not the broader public world. The fix for this is to change the IP address used in our Rust code, from 127.0.0.1 to 0.0.0.0:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;serve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;filters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;construct_book_routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;.run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;.await&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Stop the server by executing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker stop&lt;/code&gt; command on your terminal. Then, rebuild and rerun the container. If you try the curl command again, you should see the API working as expected!&lt;/p&gt;

&lt;h2 id=&quot;deploying-to-oracle-cloud-infrastructure-oci&quot;&gt;Deploying to Oracle Cloud Infrastructure (OCI)&lt;/h2&gt;

&lt;p&gt;At last, we reach the end of our tutorial: hosting our wonderful API online so that it’s available across the internet. This is the easy part!&lt;/p&gt;

&lt;p&gt;In order for the OCI to load your Docker image, you will first need to push it to the Oracle Container Registry. You’ll first need to know your Docker container’s image ID to do that. Run the following command to get that information:&lt;/p&gt;

&lt;p&gt;docker images&lt;/p&gt;

&lt;p&gt;You should see a list like the following:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;REPOSITORY TAG IMAGE ID CREATED SIZE

server latest 8f2569fb8987 25 hours ago 2.83GB
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Take note of that image ID; we will use it when uploading the image to the Oracle Cloud Infrastructure.&lt;/p&gt;

&lt;p&gt;Next, follow &lt;a href=&quot;https://docs.oracle.com/en/solutions/build-rest-java-application-with-oke/deploy-application-oracle-cloud.html#GUID-ED3E352E-F399-40A3-9530-6E436D99D28C&quot;&gt;these steps&lt;/a&gt; to learn more about performing the following actions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker login $REGION_KEY.ocir.io&lt;/code&gt;, which will log you into the Oracle Cloud Infrastructure Registry region you’re using. Note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$REGION_KEY&lt;/code&gt; is determined by whichever region your account is using; see &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm&quot;&gt;this list&lt;/a&gt; for the key which matches your region.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When prompted, your username is in the format of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;tenancy_name&amp;gt;/&amp;lt;username&amp;gt;&lt;/code&gt;. The tenancy name can be found under the Tenancy Details section of your administrative profile.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker tag $IMAGE_ID $REGION_KEY.ocir.io/$TENANCY_NAME/server:latest&lt;/code&gt;, where:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$IMAGE_ID&lt;/code&gt; is the image ID provided by Docker. (In this example, it’s 8f2569fb8987.)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$REGION_KEY&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$TENANCY_NAME&lt;/code&gt; are the same values provided earlier to log in.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker push $REGION_KEY.ocir.io/$TENANCY_NAME/server:latest&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our server image has now been uploaded onto the Oracle Cloud Infrastructure Container Registry; the final step is to instruct your Oracle Cloud service to pull that image and make use of it. We could do the longer process of &lt;a href=&quot;https://docs.oracle.com/en/solutions/build-rest-java-application-with-oke/deploy-your-application-kubernetes1.html#GUID-14EF66C9-3246-4478-B76C-5BF4031A9A8C&quot;&gt;setting up Kubernetes&lt;/a&gt;, but for such a small app, we can move much quicker if we simply load the image onto the VM directly.&lt;/p&gt;

&lt;p&gt;Let’s go ahead and create an OCI Compute instance on which to run our container. Refer to &lt;a href=&quot;https://docs.oracle.com/en/learn/lab_compute_instance/#create-a-web-server-on-a-compute-instance-1&quot;&gt;the documentation here&lt;/a&gt; to learn more about how to do so…be sure to create your Virtual Cloud Network (VCN) with at least one public subnet (hint: the VCN Wizard is a cinch). Be sure to download your SSH private key and take note of your public IP address.&lt;/p&gt;

&lt;p&gt;After the instance is provisioned, we can pull our Docker image onto it. &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/Compute/Tasks/accessinginstance.htm&quot;&gt;Follow these directions to learn how to SSH into your VM instance&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that you may need to install Docker on your instance. You can verify whether this is required (or not) by entering the commands from &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/Functions/Tasks/functionsinstalldocker.htm&quot;&gt;this guide&lt;/a&gt; into your instance. Simply checking via the docker version command is enough to confirm Docker’s presence:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;docker version
&lt;span class=&quot;go&quot;&gt;Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg. 

Client: Podman Engine
Version: 4.1.1
API Version: 4.1.1
Go Version: go1.17.12
Built: Thu Aug 4 02:48:00 2022
OS/Arch: linux/arm64                                                           
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With Docker installed, we can pull our image from the Oracle Cloud Infrastructure Registry. First, log in to the OCI Registry using the same credentials as before:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;docker login &lt;span class=&quot;nv&quot;&gt;$REGION_KEY&lt;/span&gt;.ocir.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, pull the image using the tag identifier which was created:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;docker pull $&lt;/span&gt;REGION_KEY.ocir.io/&lt;span class=&quot;nv&quot;&gt;$TENANCY_NAME&lt;/span&gt;/server:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, we will need to make one essential security change, which is opening up a single network port to our machine so that the app is publicly accessible. To do that, you’ll need to &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/mysql-database/doc/adding-ingress-rules.html&quot;&gt;set up an Ingress rule&lt;/a&gt; and point it to port 3000 (HINT: this is done in the Networking configuration, within the VCN previously created). Here’s a final screenshot of what setting up the Ingress rule looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;media/image1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that we’ve opened a rule on our network to allow ingress traffic over port 3000, we just need to open port 3000 in our local firewall to allow traffic through; run these two commands on the VM to do so:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;firewall-cmd &lt;span class=&quot;nt&quot;&gt;--permanent&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--zone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;public &lt;span class=&quot;nt&quot;&gt;--add-port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3000/tcp
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;firewall-cmd &lt;span class=&quot;nt&quot;&gt;--reload&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once that’s finished, we can run the Docker image with the same command we used when running it on our development machine:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;docker run -d -p 3000:3000 --name server_docker $&lt;/span&gt;REGION_KEY.ocir.io/&lt;span class=&quot;nv&quot;&gt;$TENANCY_NAME&lt;/span&gt;/server:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Voila! You can now call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl http://$PUBLIC_IP_ADDRESS/books&lt;/code&gt; and query the API, just like we did locally! Notice that we didn’t need to install Rust or copy over any packages; that was all taken care of by Docker.&lt;/p&gt;

&lt;h2 id=&quot;learning-more&quot;&gt;Learning more&lt;/h2&gt;

&lt;p&gt;We’ve only scratched the surface of the features OCI offers for containerized applications. There are many more features catered to modern DevOps practices, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reliable database uptime and migrations&lt;/li&gt;
  &lt;li&gt;Observability and monitoring&lt;/li&gt;
  &lt;li&gt;Security and app isolation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The speed and performance capabilities of Rust are also paired nicely with the availability and response speeds which are provided to apps running on OCI. It’s a win-win for dev, ops, and everything in between.&lt;/p&gt;

&lt;p&gt;All the code used in this post can be found in &lt;a href=&quot;https://gist.github.com/gjtorikian/8dc63f63291889ad8d95b46ff8e441df&quot;&gt;this gist&lt;/a&gt;. For more information on how OCI can help you, be sure to check out &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/GSG/Concepts/baremetalintro.htm&quot;&gt;our docs&lt;/a&gt;!&lt;/p&gt;</content>
      

      
      
      
      
      

      <author>
          <name>Oracle Developers</name>
        
        
      </author>

      
        
          <category term="clouddev" />
        
          <category term="cloudapps" />
        
      

      
        <category term="open-source" />
      
        <category term="devops" />
      
        <category term="get-started" />
      
        <category term="back-end" />
      
        <category term="rust" />
      
      <summary type="html">How to build an API using Rust and host it on Oracle Cloud Infrastructure.</summary>

      
      
    </entry>
  
    <entry>
      

      <title type="html">Using Sybl to connect to your Oracle Database</title>
      <link href="https://cool.devo.build/tutorials/rust-on-oci/rust-using-sybl-to-connect-oci" rel="alternate" type="text/html" title="Using Sybl to connect to your Oracle Database" />
      <published>2022-12-12T08:00:00+00:00</published>
      <updated>2022-12-12T08:00:00+00:00</updated>
      <id>https://cool.devo.build/tutorials/rust-on-oci/rust-using-sybl-to-connect-oci</id>
      
      
        <content type="html" xml:base="https://cool.devo.build/tutorials/rust-on-oci/rust-using-sybl-to-connect-oci">&lt;p&gt;It’s impossible to work in cloud services without hearing about Rust, the system’s programming language from Mozilla. It’s used all over the internet by companies like &lt;a href=&quot;https://blog.cloudflare.com/workers-rust-sdk/&quot;&gt;Cloudflare&lt;/a&gt;, &lt;a href=&quot;https://engineering.fb.com/2021/04/29/developer-tools/rust/&quot;&gt;Facebook&lt;/a&gt;, and &lt;a href=&quot;https://discord.com/blog/why-discord-is-switching-from-go-to-rust&quot;&gt;Discord&lt;/a&gt;. It’s a strongly-typed yet flexible language that emphasizes strict guidelines around memory usage, making it blazing fast and resource lean. The language also focuses on developer productivity, which is evident in their tooling and &lt;a href=&quot;https://crates.io/&quot;&gt;package ecosystems&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Rust is being used in places where C worked best, due in part to its recognizable syntax. It is also replacing some higher-level languages, like Node and Ruby. In this blog post, we will build a small API microservice using Rust. APIs are generally used in situations where services—a server and a client—must communicate with each other. Our API will represent the backend for an inventory bookstore, where books can be added, fetched, and removed.&lt;/p&gt;

&lt;p&gt;This app will be hosted on Oracle Cloud Infrastructure (OCI). OCI enables cloud-native containers to run in highly secure and performant environments that are also fully managed. This makes it a perfect match to host Rust applications, since the platform and the language are well-suited to solve similar problems.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;Before getting started, you’ll need to install several software packages.&lt;/p&gt;

&lt;p&gt;First, you’ll need Rust. Regardless of your operating system, &lt;a href=&quot;https://rustup.rs&quot;&gt;the Rustup script&lt;/a&gt; is guaranteed to work and installs all the necessary tools you need to start building a Rust application. You’ll also need to install &lt;a href=&quot;https://www.docker.com&quot;&gt;Docker&lt;/a&gt; to test the app containerization locally.&lt;/p&gt;

&lt;p&gt;In order to deploy the app online, you’ll also need &lt;a href=&quot;https://www.oracle.com/cloud/free/?source=CloudFree_CTA1_Default&amp;amp;intcmp=CloudFree_CTA1_Default&quot;&gt;a free OCI account&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;getting-started-with-the-rust-code&quot;&gt;Getting started with the Rust code&lt;/h2&gt;

&lt;p&gt;As with many programming languages, Rust comes with its own package management system called &lt;a href=&quot;https://crates.io&quot;&gt;Crates&lt;/a&gt;. To start building our app, we will want an HTTP web framework to do the heavy lifting for us. There are many to choose from, but we’ll use &lt;a href=&quot;https://github.com/seanmonstar/warp&quot;&gt;warp&lt;/a&gt;, as it’s both popular and performant. Just as Node uses package.json to manage packages, Rust uses Cargo.toml.&lt;/p&gt;

&lt;p&gt;Create a new directory within which you can start building this project, and create a file named Cargo.toml in it. Paste these lines into that file:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  [package]
  name = &quot;server&quot;
  version = &quot;0.1.0&quot;
  license = &quot;MIT&quot;
  edition = &quot;2018&quot;
  
  [dependencies]
  tokio = { version = &quot;1&quot;, features = [&quot;full&quot;] }
  warp = &quot;0.3&quot;
  serde = { version = &quot;1&quot;, features = [&quot;derive&quot;]}
  serde_json = &quot;1.0&quot;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, we’re defining the general metadata of our package. We’re specifying that we want to create a binary executable named server; we also have a list of dependencies that our project needs, including warp.&lt;/p&gt;

&lt;p&gt;Next, create a directory called src, and a directory called bin within that. Then, create a file called server.rs, and paste these lines into it:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  #![deny(warnings)]
  use warp::Filter;
  
  #[tokio::main]
  async fn main() {
  // Match any request and return hello world!
  let routes = warp::any().map(|| &quot;Hello, World!&quot;);
  
  warp::serve(routes).run(([127, 0, 0, 1], 3000)).await;
  }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ve defined a very basic Warp server, which will run on &lt;a href=&quot;http://127.0.0.1:3000&quot;&gt;http://127.0.0.1:3000&lt;/a&gt;. When a user visits that page, they’ll see a greeting. Go ahead and type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cargo run&lt;/code&gt; on the terminal. Cargo will download all the dependencies you defined, then it’ll compile them together with the server.rs file to create an executable. (All of that in just one command!) When it’s finished, you’ll see the following message:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ❯ cargo run
  Finished dev [unoptimized + debuginfo] target(s) in 0.06s
  Running `target/debug/server`

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Navigate your browser window to &lt;a href=&quot;http://127.0.0.1:3000&quot;&gt;http://127.0.0.1:3000&lt;/a&gt;, which should show the greeting, thus confirming that the initial project setup has worked!&lt;/p&gt;

&lt;h2 id=&quot;setting-up-an-api&quot;&gt;Setting up an API&lt;/h2&gt;

&lt;p&gt;Now that we have verified that our server runs correctly, it’s time to build a more proper API. We want our API to get a list of books, add a new book, and remove a book.&lt;/p&gt;

&lt;p&gt;In a future blog, we will integrate with a backend database for storing and querying the data. To keep things simple in this tutorial, we’ll just fake the data store by defining an array to store all of our books.&lt;/p&gt;

&lt;p&gt;Let’s start by defining the structure of a Book. Rust has the concept of structs, which are akin to lightweight classes. Here’s an example of what our Book class would look like:&lt;/p&gt;

&lt;p&gt;(All the code below replaces the code in the server.rs file.)&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;serde&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Deserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[derive(Clone,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Serialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can then modify our main function to immediately set up a basic catalog of books that follow this structure. We will use a vector (which is like an expandable array), and store the list in memory:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tokio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[tokio::main]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book_catalog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;book_catalog&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;The Hitchhiker's Guide to the Galaxy&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Douglas Adams&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1979&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;book_catalog&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;The Restaurant at the End of the Universe&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Douglas Adams&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1980&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;book_catalog&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Life, the Universe and Everything&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Douglas Adams&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1982&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;book_catalog&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;So Long, and Thanks for All the Fish&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Douglas Adams&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1984&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;book_catalog&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Mostly Harmless&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Douglas Adams&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1992&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book_catalog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So far, so good? Right on!&lt;/p&gt;

&lt;p&gt;The next task is to add routes to this API. There are a number of patterns to implement this, but the one suggested by Warp takes a two-pronged approach: First, the routes are defined, and then, the implementation of those routes is defined. This way, the implementation can change, but the route information can be considered static and stable.&lt;/p&gt;

&lt;p&gt;Let’s go ahead and define these routes. We’ll drop the code first, and then provide a closer examination:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filters&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Infallible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;cd&quot;&gt;/// The routes, combined.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;construct_book_routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Extract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rejection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Clone&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;route_get_books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;.or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;route_post_books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;.or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;route_delete_book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cd&quot;&gt;/// GET /books&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;route_get_books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Extract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rejection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Clone&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;path!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;books&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;.and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;.and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;.and_then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cd&quot;&gt;/// POST /books with JSON body&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;route_post_books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Extract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rejection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Clone&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;path!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;books&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;.and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;.and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;json_body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;.and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;.and_then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cd&quot;&gt;/// DELETE /books/:id&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;route_delete_book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Extract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rejection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Clone&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;path!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;books&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;.and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;.and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;.and_then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete_book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;with_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Extract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Infallible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Clone&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;json_body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Extract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rejection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Clone&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// When accepting a body, we want a JSON body&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;content_length_limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This might look like a lot of code, but we’re really just redefining similar path structures in composite functions. Let’s take a look at the first function:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cd&quot;&gt;/// The routes, combined.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;construct_book_routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Extract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rejection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Clone&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;route_get_books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;route_post_books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;route_delete_book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The only responsibility of construct_book_routes is to assemble a list of all the known routes. To make use of this, we must go back into our main function and change the final lines to look something like this:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;serve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;filters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;construct_book_routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;.run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;.await&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, we’re telling the warp server what our routes are, and passing along the in-memory DB we’ve created.&lt;/p&gt;

&lt;p&gt;Moving on to the next function:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cd&quot;&gt;/// GET /books&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;route_get_books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Extract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rejection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Clone&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;path!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;books&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.and_then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can ignore the function signature, as that’s largely Warp specific requirements. Instead, let’s look at the function line by line:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We’re creating a path called /books&lt;/li&gt;
  &lt;li&gt;This path responds to GET requests&lt;/li&gt;
  &lt;li&gt;It makes use of the database we’re passing it&lt;/li&gt;
  &lt;li&gt;And the actual logic is stored in a to-be-written function called get_books, within the handler’s namespace&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The other two routes define POST and DELETE, which follow a very similar pattern. Let’s move on to the logical implementation:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handlers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Infallible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Infallible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;.await&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Infallible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;.await&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
    &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;StatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CREATED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delete_book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Db&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Infallible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;.await&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.retain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;keep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;keep&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  
    &lt;span class=&quot;c1&quot;&gt;// If the vec is smaller, we found and deleted a book!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deleted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deleted&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// respond with a `204 No Content`, which means successful,&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;StatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NO_CONTENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;StatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NOT_FOUND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These routes don’t do much! The GET function prints a list of all the books available; the POST function takes a new book and adds it to the vector; and the DELETE function removes a book based on its index in the vector.&lt;/p&gt;

&lt;p&gt;(See the end of the article for the GitHub containing all this code.)&lt;/p&gt;

&lt;p&gt;Go ahead and type cargo run in the terminal. Your project will recompile, and when it’s finished, go ahead and enter curl &lt;a href=&quot;http://localhost:3000/books&quot;&gt;http://localhost:3000/books&lt;/a&gt; in another terminal window. You should see a list of your books, and you can note that the other HTTP verbs work, too!&lt;/p&gt;

&lt;h2 id=&quot;dockerizing-the-rust-server&quot;&gt;Dockerizing the Rust server&lt;/h2&gt;

&lt;p&gt;Now, we’re ready to take this project and containerize it via &lt;a href=&quot;https://www.docker.com&quot;&gt;Docker&lt;/a&gt;. Docker has evolved over the years to make this process extremely simple. The entire Dockerfile fits in less than a dozen lines of code:&lt;/p&gt;

&lt;div class=&quot;language-docker highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Using the Rust official image...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; rust:1.60&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Copy the files in your machine to the Docker image...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ./ ./&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Build your program for release...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;cargo build &lt;span class=&quot;nt&quot;&gt;--release&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# And run the binary!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;./target/release/server&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ll need to build the Docker container, which we can run with this command:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; server &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And finally, we’ll need to start the Docker container, which can be done like this:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 3000:3000 &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; server_docker server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you haven’t seen the command for running a Docker container, then it’s worth pointing out several things about the CLI flags. First, we’re exposing port 3000 in our container to our localhost, as 3000. We could change these values if there were port number conflicts between our host machine and the Docker container, however, in this tutorial, that’s not necessary. We’re also naming our Docker as server_docker. This will make it easier to distinguish between logs and other systems’ processes.&lt;/p&gt;

&lt;p&gt;After the Docker run command executes, try running the curl command again. You &lt;em&gt;might&lt;/em&gt; see the following error:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl: (7) Failed to connect to localhost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What does it mean? Well, when Docker launches the container, it assigns it its own IP address. And when the Rust server points to 127.0.0.1, it’s opening a connection to &lt;em&gt;itself&lt;/em&gt;, not the broader public world. The fix for this is to change the IP address used in our Rust code, from 127.0.0.1 to 0.0.0.0:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;warp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;serve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;filters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;construct_book_routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;.run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;.await&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Stop the server by executing the docker stop command on your terminal. Then, rebuild and rerun the container. If you try the curl command again, you should see the API working as expected!&lt;/p&gt;

&lt;h2 id=&quot;deploying-to-oracle-cloud-infrastructure-oci&quot;&gt;Deploying to Oracle Cloud Infrastructure (OCI)&lt;/h2&gt;

&lt;p&gt;At last, we reach the end of our tutorial: hosting our wonderful API online so that it’s available across the internet. This is the easy part!&lt;/p&gt;

&lt;p&gt;In order for the OCI to load your Docker image, you will first need to push it to the Oracle Container Registry. You’ll first need to know your Docker container’s image ID to do that. Run the following command to get that information:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;docker images
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should see a list like the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;REPOSITORY TAG IMAGE ID CREATED SIZE

server latest 8f2569fb8987 25 hours ago 2.83GB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Take note of that image ID; we will use it when uploading the image to the Oracle Cloud Infrastructure.&lt;/p&gt;

&lt;p&gt;Next, follow &lt;a href=&quot;https://docs.oracle.com/en/solutions/build-rest-java-application-with-oke/deploy-application-oracle-cloud.html#GUID-ED3E352E-F399-40A3-9530-6E436D99D28C&quot;&gt;these steps&lt;/a&gt; to learn more about performing the following actions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker login $REGION_KEY.ocir.io&lt;/code&gt;, which will log you into the Oracle Cloud Infrastructure Registry region you’re using. Note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$REGION_KEY&lt;/code&gt; is determined by whichever region your account is using; see &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm&quot;&gt;this list&lt;/a&gt; for the key which matches your region.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When prompted, your username is in the format of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;tenancy_name&amp;gt;/&amp;lt;username&amp;gt;&lt;/code&gt;. The tenancy name can be found under the Tenancy Details section of your administrative profile.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker tag $IMAGE_ID $REGION_KEY.ocir.io/$TENANCY_NAME/server:latest&lt;/code&gt;, where:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$IMAGE_ID&lt;/code&gt; is the image ID provided by Docker. (In this example, it’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8f2569fb8987&lt;/code&gt;.)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$REGION_KEY&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$TENANCY_NAME&lt;/code&gt; are the same values provided earlier to log in.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Finally, type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker push $REGION_KEY.ocir.io/$TENANCY_NAME/server:latest&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our server image has now been uploaded onto the Oracle Cloud Infrastructure Container Registry; the final step is to instruct your Oracle Cloud service to pull that image and make use of it. We could do the longer process of &lt;a href=&quot;https://docs.oracle.com/en/solutions/build-rest-java-application-with-oke/deploy-your-application-kubernetes1.html#GUID-14EF66C9-3246-4478-B76C-5BF4031A9A8C&quot;&gt;setting up Kubernetes&lt;/a&gt;, but for such a small app, we can move much quicker if we simply load the image onto the VM directly.&lt;/p&gt;

&lt;p&gt;Let’s go ahead and create an OCI Compute instance on which to run our container. Refer to &lt;a href=&quot;https://docs.oracle.com/en/learn/lab_compute_instance/#create-a-web-server-on-a-compute-instance-1&quot;&gt;the documentation here&lt;/a&gt; to learn more about how to do so; be sure to create your Virtual Cloud Network (VCN) with at least one public subnet (hint: the VCN Wizard is a cinch). Be sure to download your SSH private key and take note of your public IP address.&lt;/p&gt;

&lt;p&gt;After the instance is provisioned, we can pull our Docker image onto it. &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/Compute/Tasks/accessinginstance.htm&quot;&gt;Follow these directions to learn how to SSH into your VM instance&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that you may need to install Docker on your instance. You can verify whether this is required (or not) by entering the commands from &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/Functions/Tasks/functionsinstalldocker.htm&quot;&gt;this guide&lt;/a&gt; into your instance. Simply checking via the docker version command is enough to confirm Docker’s presence:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;docker version
&lt;span class=&quot;go&quot;&gt;
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg. 

Client: Podman Engine
Version: 4.1.1
API Version: 4.1.1
Go Version: go1.17.12
Built: Thu Aug 4 02:48:00 2022
OS/Arch: linux/arm64
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With Docker installed, we can pull our image from the Oracle Cloud Infrastructure Registry. First, log in to the OCI Registry using the same credentials as before:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;docker login $&lt;/span&gt;REGION_KEY.ocir.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, pull the image using the tag identifier which was created:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;docker pull $&lt;/span&gt;REGION_KEY.ocir.io/&lt;span class=&quot;nv&quot;&gt;$TENANCY_NAME&lt;/span&gt;/server:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, we will need to make one essential security change, which is opening up a single network port to our machine so that the app is publicly accessible. To do that, you’ll need to &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/mysql-database/doc/adding-ingress-rules.html&quot;&gt;set up an Ingress rule&lt;/a&gt; and point it to port 3000 (HINT: this is done in the Networking configuration, within the VCN previously created). Here’s a final screenshot of what setting up the Ingress rule looks like:&lt;/p&gt;

&lt;p&gt;{% imgx media/rId43.jpg %}&lt;/p&gt;

&lt;p&gt;Now that we’ve opened a rule on our network to allow ingress traffic over port 3000, we just need to open port 3000 in our local firewall to allow traffic through; run these two commands on the VM to do so:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;firewall-cmd &lt;span class=&quot;nt&quot;&gt;--permanent&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--zone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;public &lt;span class=&quot;nt&quot;&gt;--add-port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3000/tcp
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;firewall-cmd &lt;span class=&quot;nt&quot;&gt;--reload&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once that’s finished, we can run the Docker image with the same command we used when running it on our development machine:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 3000:3000 &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; server_docker &lt;span class=&quot;nv&quot;&gt;$REGION_KEY&lt;/span&gt;.ocir.io/&lt;span class=&quot;nv&quot;&gt;$TENANCY_NAME&lt;/span&gt;/server:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Voila! You can now call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl http://$PUBLIC_IP_ADDRESS/books&lt;/code&gt; and query the API, just like we did locally! Notice that we didn’t need to install Rust or copy over any packages; that was all taken care of by Docker.&lt;/p&gt;

&lt;h2 id=&quot;learning-more&quot;&gt;Learning more&lt;/h2&gt;

&lt;p&gt;We’ve only scratched the surface of the features OCI offers for containerized applications. There are many more features catered to modern DevOps practices, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reliable database uptime and migrations&lt;/li&gt;
  &lt;li&gt;Observability and monitoring&lt;/li&gt;
  &lt;li&gt;Security and app isolation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The speed and performance capabilities of Rust are also paired nicely with the availability and response speeds which are provided to apps running on OCI. It’s a win-win for dev, ops, and everything in between.&lt;/p&gt;

&lt;p&gt;All the code used in this post can be found in &lt;a href=&quot;https://gist.github.com/gjtorikian/8dc63f63291889ad8d95b46ff8e441df&quot;&gt;this gist&lt;/a&gt;. For more information on how OCI can help you, be sure to check out &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/GSG/Concepts/baremetalintro.htm&quot;&gt;our docs&lt;/a&gt;!&lt;/p&gt;</content>
      

      
      
      
      
      

      <author>
          <name>Oracle Developers</name>
        
        
      </author>

      
        
          <category term="clouddev" />
        
          <category term="cloudapps" />
        
      

      
        <category term="open-source" />
      
        <category term="devops" />
      
        <category term="get-started" />
      
        <category term="back-end" />
      
        <category term="rust" />
      
      <summary type="html">How to build safely with modern technology.</summary>

      
      
    </entry>
  
    <entry>
      

      <title type="html">Building Safe, Fast, and Manageable Applications with Rust and Oracle Cloud Infrastructure</title>
      <link href="https://cool.devo.build/tutorials/rust-on-oci/rust-safe-fast-manageable" rel="alternate" type="text/html" title="Building Safe, Fast, and Manageable Applications with Rust and Oracle Cloud Infrastructure" />
      <published>2022-12-12T08:00:00+00:00</published>
      <updated>2022-12-12T08:00:00+00:00</updated>
      <id>https://cool.devo.build/tutorials/rust-on-oci/rust-safe-fast-manageable</id>
      
      
        <content type="html" xml:base="https://cool.devo.build/tutorials/rust-on-oci/rust-safe-fast-manageable">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;No question—building and managing modern technology is complex.&lt;/p&gt;

&lt;p&gt;Datasets can be massive, expensive to compute, and require highly-performant processes to scale. Data security is critical to business sustainability and is difficult to execute. Architecting systems that can handle modern scale requires intelligent network load balancing and hardware availability.&lt;/p&gt;

&lt;p&gt;When you combine all of those challenges (and more!), it becomes a daunting task to imagine how to build an app that simply &lt;em&gt;works&lt;/em&gt;. Choosing the tools that solve these issues becomes a crucial question for developers.&lt;/p&gt;

&lt;p&gt;In this piece, we’ll make the case that by using &lt;strong&gt;Rust&lt;/strong&gt;—a programming language that is fast, secure, memory-safe, and supports complex abstractions—in combination with &lt;strong&gt;OCI&lt;/strong&gt;—a Platform-as-a-Service (PaaS) that provides fine-grained control, excellent security measures, and is optimized for performance—developers can have just the right tools to help tame the complexity of building modern software.&lt;/p&gt;

&lt;p&gt;We will start with brief backgrounds on Rust and OCI. Then, we’ll dive into several use cases of how Rust and OCI are an excellent solution for modern software applications.&lt;/p&gt;

&lt;h2 id=&quot;why-rust&quot;&gt;Why Rust?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt;&lt;/strong&gt; is an open source, general-purpose programming language optimized for &lt;strong&gt;safety&lt;/strong&gt;, &lt;strong&gt;concurrency&lt;/strong&gt;, and &lt;strong&gt;speed&lt;/strong&gt;. Rust offers low-level memory access and, as such, can be used for systems programming. It also has a rich set of built-in types and interfaces that allow for code organization and reuse typically associated with higher-level languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Safety&lt;/strong&gt; - Rust is considered &lt;em&gt;memory safe&lt;/em&gt;. This means it protects developers from writing code that results in bugs related to memory access, such as dangling pointers, null pointers, buffer overflows, and so on. These bugs are often exploited as security vulnerabilities. Rust achieves memory safety through features such as a strong type system and the famous &lt;a href=&quot;https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html&quot;&gt;Borrow Checker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Concurrency&lt;/strong&gt; - Rust has built-in support for concurrent and parallel programming. Developers can easily spawn threads and pass messages between them. A number of abstractions, such as &lt;a href=&quot;https://doc.rust-lang.org/std/sync/struct.Arc.html&quot;&gt;Atomic Reference Counter&lt;/a&gt; (Arc) and &lt;a href=&quot;https://www.google.com/url?q=https://tokio.rs&amp;amp;sa=D&amp;amp;source=docs&amp;amp;ust=1666376402644471&amp;amp;usg=AOvVaw0J9DysWwPHFaz8IUfOLRu5&quot;&gt;Tokio&lt;/a&gt;, protect against many of the classic dangers involved with concurrent programs. Combined with Rust’s memory safety guarantees, this allows the compiler to catch many types of bugs before the code runs. The Rust team calls this “&lt;a href=&quot;https://doc.rust-lang.org/book/ch16-00-concurrency.html&quot;&gt;Fearless Concurrency&lt;/a&gt;.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speed&lt;/strong&gt; - In terms of performance, Rust is comparable to other lower-level languages like C and C++. Rust is compiled to native code, which results in a low memory footprint. Developers have access to many features that inform the compiler how types will be laid out in memory. Rust’s type system also allows for Zero Cost Abstractions which means that many of the higher-level constructs do not come with a cost at runtime.&lt;/p&gt;

&lt;h2 id=&quot;why-oracle-cloud-infrastructure-oci&quot;&gt;Why Oracle Cloud Infrastructure (OCI)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.oracle.com/cloud/&quot;&gt;&lt;strong&gt;[Oracle Cloud Infrastructure]{.underline}&lt;/strong&gt;&lt;/a&gt; (OCI) is a set of complementary cloud services that enable you to build and run various applications and services in a highly available hosted environment.&lt;/p&gt;

&lt;p&gt;OCI provides &lt;strong&gt;high-performance compute capabilities&lt;/strong&gt; (as physical hardware instances) and &lt;strong&gt;storage capacity&lt;/strong&gt; in a flexible overlay virtual network that is &lt;strong&gt;securely accessible&lt;/strong&gt; from your on-premises network. By abstracting away the complexities of safely managing infrastructure, OCI enables businesses to deploy complex, modern applications quickly and for a fraction of the cost of staffing an internal IT team.&lt;/p&gt;

&lt;p&gt;Now that we have a little background, let’s look at three services offered on OCI, and explore how Rust works well with these features.&lt;/p&gt;

&lt;h2 id=&quot;web-and-cloud-native-applications&quot;&gt;Web and Cloud Native Applications&lt;/h2&gt;

&lt;p&gt;A large percentage of applications today are deployed as cloud-native apps. &lt;strong&gt;OCI provides best-in-class tools for easily building, hosting, and maintaining these web and cloud-native applications&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When deploying these apps, containerization has become the industry standard. OCI’s &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/Registry/Concepts/registryoverview.htm&quot;&gt;&lt;strong&gt;[Container Registry]{.underline}&lt;/strong&gt;&lt;/a&gt; allows developers to store container images and then securely access those images at any time. CI/CD pipelines can be designed to build and push images to Container Registry automatically. Containers can then be built from stored images and orchestrated via OCI &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/ContEng/Concepts/contengoverview.htm&quot;&gt;&lt;strong&gt;[Container Engine for Kubernetes]{.underline}&lt;/strong&gt;&lt;/a&gt;. Once the code is live, OCI offers resource monitoring with its &lt;strong&gt;Events Service&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Cloud-based applications built on this type of infrastructure can take many forms, such as ecommerce websites, REST APIs, or backend systems managing IoT devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Regardless of the specifics of the business domain, security, usability, performance, and time to market are critical to most apps. As seen above, Rust is designed to handle these challenges, especially with cloud-native applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Safety&lt;/strong&gt; - Web and cloud-native apps have a much broader attack surface than isolated systems. Not only is the app publicly available, but when building software for the internet, developers typically use frameworks and libraries to solve common problems. This means that the attack surface extends to code that was authored by someone else.&lt;/p&gt;

&lt;p&gt;Rust’s memory safety greatly enhances the security of an application and the software it depends on. Fewer vulnerabilities also mean fewer security updates, which means less maintenance and reduced costs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Concurrency&lt;/strong&gt; - Poor app performance leads to higher costs, lower user retention, and the inability to execute expensive computations. This is especially true with cloud-based software that may deal with concurrency issues from socket connections to monetary transactions. Rust’s promise of “Fearless Concurrency” allows developers to take advantage of OCI infrastructure to build correct and performant concurrent software.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speed&lt;/strong&gt; - In addition to the built-in Rust features that increase execution speed, the Rust ecosystem also has several frameworks that encourage rapid development. ORMs exist for data modeling and persistence layer abstraction. Some notable web frameworks that are gaining popularity include &lt;a href=&quot;https://nickel-org.github.io/&quot;&gt;Nickel.rs&lt;/a&gt; or &lt;a href=&quot;https://actix.rs/&quot;&gt;Actix&lt;/a&gt;, both of which can take advantage of projects like &lt;a href=&quot;https://diesel.rs/&quot;&gt;Diesel&lt;/a&gt; for the database abstraction layer.&lt;/p&gt;

&lt;h2 id=&quot;serverless-functions&quot;&gt;Serverless Functions&lt;/h2&gt;

&lt;p&gt;Serverless functions are short-running processes that perform discrete tasks, such as processing image data, persisting data to cloud storage, or sending emails. They are usually invoked in response to events and can be chained together to accomplish tasks of arbitrary complexity. When the code is invoked, resources are automatically allocated to achieve configurable performance characteristics. When the code stops running, resources are deallocated. This allows for a cheap and sustainable choice over other alternatives.&lt;/p&gt;

&lt;p&gt;OCI supports serverless functions with its &lt;strong&gt;&lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/Functions/Concepts/functionsoverview.htm&quot;&gt;Cloud Functions&lt;/a&gt;.&lt;/strong&gt; Cloud Functions conform to &lt;a href=&quot;https://fnproject.io/&quot;&gt;Fn Project&lt;/a&gt; standards and utilize OCI &lt;strong&gt;Cloud Events&lt;/strong&gt; to trigger the invocation of functions. Because Cloud Functions are based on standards from the Fn Project, the code is portable between OCI and other infrastructures that also conform to Fn Project standards.&lt;/p&gt;

&lt;p&gt;Cloud Functions has built-in support for several popular programming languages, such as Go, Node, and Ruby. Developers can use the Fn Project CLI to create, configure, and manage serverless functions easily.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Safety&lt;/strong&gt; - Rust’s compile time checks allow developers to write serverless functions with peace of mind knowing that the code is memory safe and free of many types of bugs prior to deployment. Rust also has a built-in test harness, providing even more confidence through the use of unit testing. Test code is not compiled into releases which keeps binaries small.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speed&lt;/strong&gt; - The event-based nature of serverless functions allows for triggering the process on a predefined schedule. One example is sending a notification to an IoT device every minute. Rust’s low memory footprint and emphasis on performance make it an ideal choice for serverless functions, as tasks can be completed quickly and with low resource consumption. This saves money and energy resulting in fast, sustainable, cheap software solutions.&lt;/p&gt;

&lt;p&gt;OCI Cloud Functions run inside docker images. Although Cloud Functions do not have direct support for Rust, developers can design and build images conforming to the Fn Project standards and deploy those images to the OCI infrastructure. Rust code can easily be compiled into executable binaries and built into container images for use in Cloud Functions.&lt;/p&gt;

&lt;h2 id=&quot;high-performance-computing-workloads&quot;&gt;High Performance Computing Workloads&lt;/h2&gt;

&lt;p&gt;Sometimes it’s necessary to perform computational operations that are extremely resource-intensive. Situations like this require massive processing power, which translates to large numbers of cores working in parallel. Core clusters are connected over a network and often write output to some form of storage. For these types of programs, performance is key.&lt;/p&gt;

&lt;p&gt;OCI supports performance-intensive workloads with &lt;a href=&quot;https://www.oracle.com/cloud/hpc/&quot;&gt;&lt;strong&gt;[High Performance Computing]{.underline}&lt;/strong&gt;&lt;/a&gt; services. Programs have access to potentially tens of thousands of cores connected over a low-latency network. Developers can choose to run code on bare metal or virtual machines. OCI also offers preconfigured virtual machines for ML/AI data science applications with access to large storage volumes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speed&lt;/strong&gt; - Again, Rust’s performance characteristics make it a natural fit for these situations. Having low-level access allows developers to finely tune how data structures are laid out in memory and how algorithms interact with resources. When dealing with resource-intensive programming, speed directly translates to reduced energy consumption and costs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Concurrency&lt;/strong&gt; - Access to massive clusters of cores only increases productivity if the code running on the system can efficiently utilize as many cores as possible at any given time. Rust’s support for parallel and concurrent programming has huge advantages here. Rust’s memory safety and “Fearless Concurrency” allow developers to write complex parallel programs confidently and securely.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The complex nature of software development requires developers to choose tools wisely. The correct combination of infrastructure and programming language has huge implications for the success or failure of a software system.&lt;/p&gt;

&lt;p&gt;Successful modern software systems need to be secure, performant, and flexible enough to meet the changing needs of the domain in which they operate. OCI’s commitment to, and investment in, fine grain control, security, and optimization is echoed by the Rust team and is reflected in the language and ecosystem. This makes Rust an excellent choice for building complex software on top of OCI.&lt;/p&gt;</content>
      

      
      
      
      
      

      <author>
          <name>Oracle Developers</name>
        
        
      </author>

      
        
          <category term="clouddev" />
        
          <category term="cloudapps" />
        
      

      
        <category term="open-source" />
      
        <category term="devops" />
      
        <category term="get-started" />
      
        <category term="back-end" />
      
        <category term="rust" />
      
      <summary type="html">How to build safely with modern technology.</summary>

      
      
    </entry>
  
    <entry>
      

      <title type="html">Rust on OCI</title>
      <link href="https://cool.devo.build/tutorials/rust-on-oci/" rel="alternate" type="text/html" title="Rust on OCI" />
      <published>2022-12-12T06:00:00+00:00</published>
      <updated>2022-12-12T06:00:00+00:00</updated>
      <id>https://cool.devo.build/tutorials/rust-on-oci/</id>
      
      
        <content type="html" xml:base="https://cool.devo.build/tutorials/rust-on-oci/"></content>
      

      
      
      
      
      

      <author>
          <name>{&quot;name&quot;=&gt;nil}</name>
        
        
      </author>

      

      
        <category term="open-source" />
      
        <category term="devops" />
      
        <category term="get-started" />
      
        <category term="rust" />
      
      <summary type="html">Use Rust to implement applications on Oracle Cloud Infrastructure</summary>

      
      
    </entry>
  
    <entry>
      

      <title type="html">HeatWave on AWS Metrics and Performance Tools</title>
      <link href="https://cool.devo.build/tutorials/metrics-and-performance-hw-aws-devrel0622" rel="alternate" type="text/html" title="HeatWave on AWS Metrics and Performance Tools" />
      <published>2022-06-16T17:00:00+00:00</published>
      <updated>2022-06-16T17:00:00+00:00</updated>
      <id>https://cool.devo.build/tutorials/metrics-and-performance-hw-aws-devrel0622</id>
      
      
        <content type="html" xml:base="https://cool.devo.build/tutorials/metrics-and-performance-hw-aws-devrel0622">&lt;p&gt;As you’re working with your data, you’ll want to check out the performance of MySQL HeatWave on AWS, and we provide a number of metrics for you to examine.&lt;/p&gt;

&lt;h3 id=&quot;heatwave-cluster-workspaces&quot;&gt;HeatWave Cluster Workspaces&lt;/h3&gt;

&lt;p&gt;{% imgx assets/hwaws-query_already_run-devrel0622.png %}&lt;/p&gt;

&lt;p&gt;Above, we see the Workspaces tab in the Console, having just run a query. While we see a memory snapshot, we can go deeper in the Performance tab.&lt;/p&gt;

&lt;h3 id=&quot;performance&quot;&gt;Performance&lt;/h3&gt;

&lt;p&gt;{% imgx assets/hw_performance_monitoring-devrel0622.png %}&lt;/p&gt;

&lt;p&gt;Here’s the good stuff! Not only can you see performance per node, you can see the size of the dataset, the data dictionary, and if you click on Workload on the left side, you’ll see duration each step of the query took, and when queries have taken place.&lt;/p&gt;

&lt;p&gt;{% imgx assets/hw_performance_monitoring_03-devrel0622.png %}&lt;/p&gt;

&lt;p&gt;Clicking back on Cluster and scrolling down, we can see metrics related to the VM itself, including memory and connection usage, CPU, and so on. If you’re keen on squeezing every drop of performance that you can out of HeatWave on AWS, we got you.&lt;/p&gt;

&lt;p&gt;{% imgx assets/hw_performance_monitoring_02-devrel0622.png %}&lt;/p&gt;

&lt;p&gt;Want to know more? Join the discussion in our &lt;a href=&quot;https://bit.ly/devrel_slack&quot;&gt;public Slack channel&lt;/a&gt;!&lt;/p&gt;</content>
      

      
      
      
      
      

      <author>
          <name>Victor Agreda</name>
        
        
      </author>

      
        
          <category term="cloudapps" />
        
      

      
        <category term="mysql" />
      
        <category term="database" />
      
        <category term="heatwave" />
      
      <summary type="html">A quick overview of the performance and metrics console windows in MySQL HeatWave on AWS.</summary>

      
      
    </entry>
  
    <entry>
      

      <title type="html">Getting Started with MySQL HeatWave on AWS</title>
      <link href="https://cool.devo.build/tutorials/oci-getting-started-heatwave-aws-v30622" rel="alternate" type="text/html" title="Getting Started with MySQL HeatWave on AWS" />
      <published>2022-06-16T17:00:00+00:00</published>
      <updated>2022-06-16T17:00:00+00:00</updated>
      <id>https://cool.devo.build/tutorials/oci-getting-started-heatwave-aws-v30622</id>
      
      
        <content type="html" xml:base="https://cool.devo.build/tutorials/oci-getting-started-heatwave-aws-v30622">&lt;p&gt;We live in a multi-cloud world, and that’s why MySQL HeatWave for Amazon Web Service makes so much sense if you need a massively parallel, high performance, in-memory query accelerator for the MySQL Database Service. A combination that accelerates MySQL performance by orders of magnitude for combined analytics and transactional workloads (OLAP and OLTP). The MySQL Database Service is built on MySQL Enterprise Edition, which allows developers to quickly create and deploy secure cloud native applications using the world’s most popular open source database.&lt;/p&gt;

&lt;p&gt;Oracle designed this so developers can focus on the important things, like managing data, creating schemas, and providing highly-available applications. MySQL HeatWave for Amazon Web Services (AWS) is a fully managed service, developed and supported by the MySQL team in Oracle. Oracle automates tasks such as backup, recovery, and database and operating system patching. “Worry less, crunch more,” as we say!&lt;/p&gt;

&lt;p&gt;If you’ve never heard of HeatWave, think of it as a database query accelerator with boost buttons. As in The Fast and the Furious, when you want to pull ahead of the competition, you hit the NO2 and get the speed you need, right when you need it. And of course, this efficiency means it’s a little less expensive to run those big queries. One of the incredible things about Oracle MySQL HeatWave is the ability to &lt;a href=&quot;https://www.oracle.com/mysql/heatwave/&quot;&gt;run analytics&lt;/a&gt; directly against your existing transactional data, so there’s no need to shuffle that data off to a separate system when you need to perform massively parallel analysis.&lt;/p&gt;

&lt;p&gt;To get started, we’ll create a compartment and install MySQL Shell due to its extended capabilities over vanilla MySQL and create a small database so we can eventually connect it to HeatWave for analysis. Note that this is working within Oracle Cloud, but we’ll cover AWS setup in another tutorial to show you how you can leverage HeatWave in a multi-cloud scenario. What a time to be alive!&lt;/p&gt;

&lt;p&gt;Let’s look at how to get started. If you’re already developing in Oracle Cloud (OCI), you’ll find it’s relatively easy to get going, as HeatWave on AWS is integrated with OCI’s Identity and Access Management system. When you sign up for HeatWave on AWS, you’ll be directed to the OCI login page where you must sign in with an OCI Cloud Account. After signing in, you’ll be directed to the OCI Console to complete the MySQL HeatWave on AWS sign-up process. When signing into the HeatWave Console, you are directed to OCI for authentication and then back to the HeatWave Console. To keep things simple, billing is still managed and monitored in OCI.&lt;/p&gt;

&lt;p&gt;Since we’re just getting started, let’s begin truly at the beginning and create a compute instance with the proper access rules and see how to create a HeatWave cluster in OCI. If you’re already using AWS, we’ll cover that in a separate tutorial.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;PREREQUISITES&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;An OCI account and Oracle Cloud Account name&lt;/li&gt;
  &lt;li&gt;Admin access&lt;/li&gt;
  &lt;li&gt;A compatible browser (Chrome 69+, Safari 12.1+, or Firefox 62+ or any browser that is Oracle Jet-approved)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;overview&quot;&gt;OVERVIEW&lt;/h2&gt;

&lt;p&gt;MySQL HeatWave on AWS uses predefined Oracle Identity Cloud Service (IDCS) groups and policies to control user access to MySQL HeatWave on AWS and the type of access. You should have the ability to create and modify policies, users, and the like. Also, we are assuming you’re creating the database and administering it, or at least getting the prep work done. Look at you, a one-stop shop!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a Compartment&lt;/li&gt;
  &lt;li&gt;Create a a VCN and configure for database access&lt;/li&gt;
  &lt;li&gt;Create users and groups (if you haven’t already)&lt;/li&gt;
  &lt;li&gt;Create a Bastion Host compute instance&lt;/li&gt;
  &lt;li&gt;Connect and Install MySQL Shell&lt;/li&gt;
  &lt;li&gt;Create a MySQL database&lt;/li&gt;
  &lt;li&gt;Create a DB System with HeatWave-compatible shape&lt;/li&gt;
  &lt;li&gt;Activate HeatWave on AWS&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Wondering why this is a “bastion host”? You can read more about bastions in this &lt;a href=&quot;https://www.oracle.com/security/cloud-security/bastion/&quot;&gt;article&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Once you’re connecting databases and analytics, there’s a better production method for connecting, and that’s creating a Private Access Channel (OAC), which you can learn all about in the article, &lt;a href=&quot;https://blogs.oracle.com/analytics/post/how-to-create-oac-instances-on-oci-native-using-multiple-stripes-or-instances-of-idcs&quot;&gt;How to create OAC instances on OCI Native using multiple stripes or instances of IDCS&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our example, we’re using a quick and dirty approach to set things up to use HeatWave.&lt;/p&gt;

&lt;p&gt;Now let’s get started with the basics! We begin by slicing off a piece of the cloud as our own little homestead. There are a couple of ways to do this, but one of the simplest is to create a Compartment (you could also start with a Compute instance). This is a “place for your stuff” within your tenancy and is quite flexible. As you might imagine, we need to create a group of users who can administer our system, and Identity and Access Management (IAM) is where you’ll go to configure this for any compartments you create.&lt;/p&gt;

&lt;h2 id=&quot;create-a-compartment&quot;&gt;Create a Compartment&lt;/h2&gt;

&lt;p&gt;{% imgx assets/create-compartment-hwaws-devrel0266va.png %}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Menu:&lt;/strong&gt; Home &amp;gt; Identity &amp;amp; Security &amp;gt; Compartments&lt;/p&gt;

&lt;p&gt;I could have set all of this up in my root compartment, but a new compartment is better way to organize things.&lt;/p&gt;

&lt;p&gt;Creating compartments is a simple matter, and a necessary starting point to organize and configure your work. I’ve named mine something clever, like &lt;em&gt;my_heatwave_testing&lt;/em&gt; so I know what it’s for.&lt;/p&gt;

&lt;h2 id=&quot;create-a-vcn-and-configure-for-database-access&quot;&gt;Create a VCN and configure for database access&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Menu:&lt;/strong&gt; Home &amp;gt; Networking &amp;gt; Virtual Cloud Networks&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create VCN and subnets using &lt;strong&gt;Virtual Cloud Networks &amp;gt; Start VCN Wizard &amp;gt; Create a VCN with Internet Connectivit&lt;/strong&gt;y.&lt;/p&gt;

    &lt;p&gt;{% imgx assets/start_a_vcn_wizard-devrel0622va.png %}&lt;/p&gt;

    &lt;p&gt;The handy wizard will walk you through creating a network interface for your system, although there are lots of ways to configure this, let’s not get distracted. Notice that I chose the compartment I set up earlier, my_heatwave_testing – because that’s important!&lt;/p&gt;

    &lt;p&gt;{% imgx assets/vcn_config_screen2-devrel0622va.png %}&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now let’s configure the VCN’s security list to allow traffic through MySQL Database Service ports.&lt;br /&gt;
Click on the &lt;strong&gt;Private Subnet&lt;/strong&gt; for the VCN you created, then click the &lt;strong&gt;Security List&lt;/strong&gt; for it.&lt;/p&gt;

    &lt;p&gt;{% imgx assets/vcn_edit_subnet_s1-devrel0622va.png %}&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now click &lt;strong&gt;Add Security&lt;/strong&gt; list.&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;We’ll add some ingress rules needed to enable the right ports, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3306&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;33060&lt;/code&gt;.&lt;br /&gt;
Here’s the details:&lt;/p&gt;

        &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;   Source CIDR: 0.0.0.0/0

   Destination Port Range: 3306,33060

   Description: MySQL Port
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;And click &lt;strong&gt;Add Ingress Rules&lt;/strong&gt;.&lt;/p&gt;

        &lt;p&gt;{% imgx assets/vcn_ingress_rules_example-devrel0622va.png %}&lt;/p&gt;

        &lt;p&gt;Looking good so far!&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;create-users-and-groups-if-you-havent-already&quot;&gt;Create users and groups (if you haven’t already)&lt;/h2&gt;

&lt;p&gt;We’ll need to set permissions and limit access somewhat, even in our “quick and dirty” example, but you can &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managinggroups.htm&quot;&gt;read all about managing groups here&lt;/a&gt;. Usually we’ll create a group, create policies, then add users to the group.&lt;/p&gt;

&lt;p&gt;Let’s make friends with the &lt;strong&gt;Identity and Security&lt;/strong&gt; options.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create a group for your users.&lt;br /&gt;
In my example I’ve created a group called database_user (just to be confusing, as I should have named it database_admins, but this was just a clever ploy to keep you on your toes).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add users to the group.&lt;br /&gt;
In our example, we’ll add ourselves to this group that will administer our compute instance running MySQL-shell.&lt;/p&gt;

    &lt;p&gt;Of course, for a group you’ll first create all the users you need, add those into the group needing access at the levels you determine, and rest assured that you can set them loose with appropriate access controls.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We allow access by setting policies, allowing one group to have full access (admins), and a group with limited access (database users, for example).&lt;/p&gt;

    &lt;p&gt;For MySQL HeatWave on AWS, there are some specific policy statements we can use, detailed in the charts below.&lt;/p&gt;

    &lt;p&gt;{% imgx assets/hw_policy_aws_statements-devrel0622va.png %}&lt;/p&gt;

    &lt;p&gt;This is just making it possible to configure and administrate our compartment, and defines the scope of the access applied to the database instance.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more on adding users and setting policies in OCI, refer to &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/GSG/Tasks/addingusers.htm#Add&quot;&gt;this documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;create-a-bastion-host-compute-instance&quot;&gt;Create a Bastion Host Compute Instance&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;MENU:&lt;/strong&gt; Main &amp;gt; Compute &amp;gt; Instances&lt;/p&gt;

&lt;p&gt;Be sure to select the compartment you set up earlier, under &lt;strong&gt;List Scope&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;{% imgx assets/compute_hw_listscope_compartment-devrel0622va.png %}&lt;/p&gt;

&lt;p&gt;{% imgx assets/create_instance_hw_devrel_0522-0622va.png %}&lt;/p&gt;

&lt;h3 id=&quot;create-instance&quot;&gt;Create Instance&lt;/h3&gt;

&lt;p&gt;Click &lt;strong&gt;Create Instance&lt;/strong&gt; (easy, right?)&lt;/p&gt;

&lt;p&gt;Name it something useful, and right now we’ll leave the Availability Domain, Fault Domain, Image, and Shape as-is. You can use a free-tier compute!&lt;/p&gt;

&lt;p&gt;We’re going to use Oracle Linux, but one of the niceties here are the choices of compute shapes and Linux distributions to choose from. There’s even a developer distro, which comes pre-configured with key frameworks. For our purposes, we’ll want to make sure it’s set up to work with HeatWave. Plus, we’ll use a Bastion Host for better security. Bastions provide “restricted and time-limited access to target resources that don’t have public endpoints,” and you can &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/Bastion/Concepts/bastionoverview.htm&quot;&gt;read all about them in this overview article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;{% imgx assets/create_compute_hw_devrel0522aa.png %}&lt;/p&gt;

&lt;h4 id=&quot;launching-a-linux-instance&quot;&gt;Launching a Linux instance&lt;/h4&gt;

&lt;p&gt;If you want to know more, &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/Compute/Tasks/launchinginstance.htm&quot;&gt;here’s a tutorial on launching a Linux instance&lt;/a&gt;, but I’ll walk you through the basics now. Bear in mind that our compute instance can be pretty minimal, and there are free tier shapes that could work (&lt;a href=&quot;https://www.oracle.com/cloud/free/&quot;&gt;our always-free tier VM&lt;/a&gt; is quite generous).&lt;/p&gt;

&lt;p&gt;{% imgx assets/compute_network_hw_devrel0522aa.png %}&lt;/p&gt;

&lt;h3 id=&quot;networking&quot;&gt;Networking&lt;/h3&gt;

&lt;p&gt;Scrolling down, you’ll see the &lt;strong&gt;Networking&lt;/strong&gt; section. Here you’ll want to make sure to use the &lt;a href=&quot;#create-a-vcn-and-configure-for-database-access&quot;&gt;VCN you created previously&lt;/a&gt;, as well as make sure you’re in the proper compartment.&lt;/p&gt;

&lt;h3 id=&quot;generate-ssh-keys&quot;&gt;Generate SSH keys&lt;/h3&gt;

&lt;p&gt;And of course, during this process you’ll generate SSH keys so you can access your computer instance remotely. You can do this within the Cloud Shell in OCI’s dashboard, or the SSH client of your choice.&lt;/p&gt;

&lt;h4 id=&quot;let-oracle-make-it-easy&quot;&gt;Let Oracle make it easy&lt;/h4&gt;

&lt;p&gt;Also, the path of least resistance for creating a key pair will be letting Oracle generate one. The key pair will allow you to log in remotely and install MySQL-shell, etc.&lt;/p&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In many labs we’ll have you use the Cloud Shell, which is a convenient command line interface available directly in the OCI dashboard. I’m old school, so I’m just using Terminal on my Mac. You can use the SSH client of your choice, of course!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For more information see:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en-us/iaas/developer-tutorials/tutorials/node-on-ol/01oci-ol-node-summary.htm#install-node-ol&quot;&gt;Install Node Express on an Oracle Linux Instance&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=LMvYOSkXF1k&quot;&gt;A video on working with SSH keys&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;obtain-public-ip-for-compute-instance&quot;&gt;Obtain public IP for compute instance&lt;/h3&gt;

&lt;p&gt;Of course, you’ll need the public IP for your compute instance, which is found in &lt;strong&gt;Compute &amp;gt; Instances &amp;gt; Instance details&lt;/strong&gt;. Under &lt;strong&gt;Instance Access&lt;/strong&gt; you’ll find the public IP and username (opc) you’ll need to connect, with a handy &lt;strong&gt;copy&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;{% imgx assets/heres-public-ip-hw-oci-fy23-devrel.png %}&lt;/p&gt;

&lt;p&gt;Now, we’ll be able to &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/Compute/Tasks/accessinginstance.htm&quot;&gt;connect via SSH or the Cloud Shell&lt;/a&gt;, and since you have a public IP, you can just ssh in to your compartment and the OCI Linux compute instance.&lt;/p&gt;

&lt;p&gt;As always, keep the private key in a safe place and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod 400&lt;/code&gt; the private key to keep it from being modified (and throwing a warning).&lt;/p&gt;

&lt;h3 id=&quot;provision-the-instance&quot;&gt;Provision the Instance&lt;/h3&gt;

&lt;p&gt;Go ahead and click &lt;strong&gt;Create&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It’ll take a moment for the provisioning to finish up, but when it’s done the large square icon will turn green, meaning all systems are GO!&lt;/p&gt;

&lt;h2 id=&quot;connect-and-install-mysql-shell&quot;&gt;Connect and install MySQL Shell&lt;/h2&gt;

&lt;p&gt;To connect, let’s use the handy Cloud Shell. It’s a little Linux terminal embedded in the OCI dashboard (and it’s adorable).&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In the upper-right corner, click the &lt;strong&gt;Cloud Shell&lt;/strong&gt; prompt icon and a command line will open at the bottom of the browser.&lt;/p&gt;

    &lt;p&gt;{% imgx assets/cloudshelliconhwtesting-devrel0622va.png %}&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Drag and drop the previously saved private key into the cloud shell, uploading it to your home directory.&lt;/p&gt;

    &lt;p&gt;{% imgx assets/cloudshelluploadprivkey_hwdevrel-devrel0622va.png %}&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Under Instance Access, you’ll see the public IP address, and the handy &lt;strong&gt;Copy&lt;/strong&gt; button. Copy the public IP.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now let’s ssh in, first protecting the private key file.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;   chmod 400 &amp;lt;private-key-filename&amp;gt;&lt;/span&gt;.key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then use your public IP address and username opc:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;   ssh -i &amp;lt;private-key-file-name&amp;gt;&lt;/span&gt;.key opc@&amp;lt;compute_instance_public_ip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If asked to accept the fingerprint, type &lt;em&gt;yes&lt;/em&gt; and hit &lt;strong&gt;enter&lt;/strong&gt;.&lt;br /&gt;
You’ve been added to the list of known hosts, congrats. We’re in! If you see Tron, wave.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now we install MySQL Shell; pretty easy these days. In my case, I used SSH to log into my compute instance (don’t forget you’ll need your private key) and used yum to install what I needed.&lt;/p&gt;

    &lt;p&gt;Install the MySQL Client on the compute instance using the following command:&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo yum install mysql-shell&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once we create our HeatWave-compatible DB System, we’ll connect to to it using the MySQL Client:&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysqlsh --host &amp;lt;DBSystemEndpointIPAddress&amp;gt; -u &amp;lt;Username&amp;gt; -p&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more information see:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/doc/mysql-shell/8.0/en/&quot;&gt;Learning about MySQL Shell&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/en-us/iaas/mysql-database/doc/connecting-db-system.html#GUID-70023ABD-5418-4C1F-975F-F3E2ABC0F93E&quot;&gt;Learning about connecting database systems&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;create-a-db-system&quot;&gt;Create a DB System&lt;/h2&gt;

&lt;p&gt;Remember a little while ago when we mentioned the endpoint for your DB System? Let’s set that up now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MENU:&lt;/strong&gt; Menu &amp;gt; Databases &amp;gt; DB Systems&lt;/p&gt;

&lt;p&gt;{% imgx assets/createdbsys_warn_devrel_0522va.png %}&lt;/p&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Notice that the system warns you if you haven’t already set up users, a VCN, and so on. That’s nice.&lt;br /&gt;
Also, don’t forget to check which compartment you’ll create this in, again under &lt;strong&gt;List Scope&lt;/strong&gt; on the left.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Click &lt;strong&gt;Create DB System&lt;/strong&gt;.&lt;/p&gt;

    &lt;p&gt;Double-check the compartment, give it a name, and select HeatWave (of course).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You’ll create admin credentials.&lt;br /&gt;
Be sure to save those somewhere handy but safe!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;In &lt;strong&gt;Configure Networking&lt;/strong&gt;, you’ll use the compute instance created earlier, but we’ll use the private subnet. Leave the default domain.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Go to &lt;strong&gt;Configure Hardware&lt;/strong&gt;.&lt;/p&gt;

    &lt;p&gt;Confirm that in the &lt;strong&gt;Configure Hardware&lt;/strong&gt; section, the selected shape is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL.HeatWave.VM.Standard.E3&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;Also, confirm that:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;CPU Core Count: 16,&lt;/li&gt;
      &lt;li&gt;Memory Size: 512 GB,&lt;/li&gt;
      &lt;li&gt;Data Storage Size: 1024&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the &lt;strong&gt;Configure Backup&lt;/strong&gt; section you may leave the default backup window of 7 days.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Keep scrolling and click &lt;strong&gt;Show Advanced Options&lt;/strong&gt;.&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;Go to the &lt;strong&gt;Networking&lt;/strong&gt; tab.&lt;br /&gt;
In the &lt;strong&gt;Hostname&lt;/strong&gt; field, enter the exact name of your DB System.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Make sure port configuration corresponds to the following:&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;MySQL Port: 3306&lt;/li&gt;
          &lt;li&gt;MySQL X Protocol Port: 33060&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;And… click &lt;strong&gt;Create&lt;/strong&gt;!&lt;/p&gt;

    &lt;p&gt;This time a yellow hexagon will appear, and eventually it’ll turn green and your DB System will be up and running. Make some tea or grab some water, you’ve done a lot.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;create-a-mysql-database&quot;&gt;Create a MySQL database&lt;/h2&gt;

&lt;p&gt;Now, you’ll want to create your database and import any data you need. HeatWave is really designed for big data sets needing fast analysis, so even though I’m importing the tiniest database ever, you can load up as much as you like (provided you have the storage for it). Plus, queries can be run in the cluster without offloading to a separate database. Whether you’re deploying to OCI or AWS, we got you.&lt;/p&gt;

&lt;p&gt;Finally, the fun part! Import a .sql file.&lt;/p&gt;

&lt;h3 id=&quot;from-the-command-line&quot;&gt;From the command line&lt;/h3&gt;

&lt;p&gt;Type: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql -u username -p database_name &amp;lt; file.sql&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username&lt;/code&gt; refers to your MySQL username.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;database_name&lt;/code&gt; refers to the database you want to import.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file.sql&lt;/code&gt; is your file name.&lt;/li&gt;
  &lt;li&gt;If you’ve assigned a password, type it now and press &lt;strong&gt;Enter&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=gvcBDA2wJJ4&quot;&gt;Here’s a video on importing using the command line&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;using-mysqldump&quot;&gt;Using mysqldump&lt;/h3&gt;

&lt;p&gt;Lots of fans of mysqldump out there, so here’s how that works (using a made-up database for magazines):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;To import a .sql file with mysqldump, use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysqlimport&lt;/code&gt; command with the following flags and syntax:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ mysqlimport -u magazine_admin -p magazines_production ~/backup/database/magazines.sql&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-u&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-p&lt;/code&gt; are needed for authentication, and is then followed by the name of the database you want to import into.&lt;/li&gt;
      &lt;li&gt;You’ll need to specify the path to your SQL dump file that will contain your import data: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/backup/database/magazines.sql&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;You won’t need to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; for importing, but you will need them for exporting in the next guide.&lt;/li&gt;
      &lt;li&gt;This will prompt a password request.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Your file will be automatically imported.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that we have some data, we probably want to DO stuff with it, including visualize it in various ways. Let’s add some analytics to accomplish this – and continue our journey to the really big show, HeatWave. This is where things get really interesting, and you can see how Oracle has created a vast menu of options for your data needs.&lt;/p&gt;

&lt;p&gt;The key is that you have a database running on OCI, and that database now has an endpoint which we can connect to HeatWave for analytics.&lt;/p&gt;

&lt;h2 id=&quot;activate-heatwave-on-aws&quot;&gt;Activate HeatWave on AWS&lt;/h2&gt;

&lt;p&gt;Remember the DB System we just created? Now we can activate MySQL HeatWave in AWS and connect our DB System to a HeatWave Cluster to run queries on!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;You’ll go to &lt;a href=&quot;http://cloud.mysql.com/&quot;&gt;http://cloud.mysql.com/&lt;/a&gt;, where you’ll see the welcome page.&lt;br /&gt;
Enter your Oracle Cloud Account name and click &lt;strong&gt;Continue&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click &lt;strong&gt;Enable MySQL HeatWave on AWS&lt;/strong&gt;.&lt;br /&gt;
This takes you to a Admin page where you will go through a brief setup process. You may have to upgrade your account to paid with a credit card, and once complete, you’ll go to the OCI Console. Try not to time this for the last minute, as provisioning may take a moment.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;From the OCI Console navigation menu, select &lt;strong&gt;Databases&lt;/strong&gt;.&lt;/p&gt;

    &lt;p&gt;MySQL HeatWave on AWS appears on the Home tab under the Featured label.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Under &lt;strong&gt;MySQL HeatWave on AWS&lt;/strong&gt;, click &lt;strong&gt;Administration&lt;/strong&gt;, and you’ll go back to the setup.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now click &lt;strong&gt;Provision&lt;/strong&gt; to (of course) provision MySQL on AWS. 
After the provisioning operation is completed, a message appears stating that MySQL HeatWave on AWS is ready and you are presented with options to open the MySQL HeatWave console, set up users, and view billing information.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;summary---so-far&quot;&gt;Summary - so far&lt;/h2&gt;

&lt;p&gt;What we’ve done so far, all on OCI, is set up a Virtual Cloud Network with ports for MySQL use, created a Bastion Compute instance, then set up a MySQL database, and now we have an endpoint for our HeatWave on AWS instance, and HeatWave should be provisioned on AWS.&lt;/p&gt;

&lt;p&gt;Want to know more? Join the discussion in our &lt;a href=&quot;https://bit.ly/devrel_slack&quot;&gt;public Slack channel&lt;/a&gt;!&lt;/p&gt;</content>
      

      
      
      
      
      

      <author>
          <name>Victor Agreda</name>
        
        
      </author>

      
        
          <category term="cloudapps" />
        
      

      
        <category term="mysql" />
      
        <category term="database" />
      
        <category term="heatwave" />
      
        <category term="aws" />
      
      <summary type="html">Getting your OCI tenancy ready to connect to MySQL HeatWave on AWS. We will create a compute instance, DB System, and endpoint. We also began to provision MySQL HeatWave on AWS.</summary>

      
      
    </entry>
  
    <entry>
      

      <title type="html">Using the AWS Migration Service with HeatWave on AWS with WordPress as an Example</title>
      <link href="https://cool.devo.build/tutorials/using-aws-migration-service-wp-ex-devrel0622" rel="alternate" type="text/html" title="Using the AWS Migration Service with HeatWave on AWS with WordPress as an Example" />
      <published>2022-06-16T17:00:00+00:00</published>
      <updated>2022-06-16T17:00:00+00:00</updated>
      <id>https://cool.devo.build/tutorials/using-aws-migration-service-wp-ex-devrel0622</id>
      
      
        <content type="html" xml:base="https://cool.devo.build/tutorials/using-aws-migration-service-wp-ex-devrel0622">&lt;p&gt;Now let’s try something really fun. Let’s say you’ve already got a database using Aurora or RDS, in our case we’ll use a WordPress database, and you want to migrate it to MySQL HeatWave on AWS.&lt;/p&gt;

&lt;p&gt;First, we’ll need to have a MySQL DB System on HeatWave already, and a critical step is opening port 3306, shown below.&lt;/p&gt;

&lt;p&gt;{% imgx assets/create-mysqldbsys-devrel0622.png %}&lt;/p&gt;

&lt;p&gt;Great! Now let’s head over to AWS.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Log in to your AWS console, and use search for “DMS” — Database Migration Service, it’ll be the top result.&lt;/p&gt;

    &lt;p&gt;{% imgx assets/awsdbs-migrationservice-search-devrel0622.png %}&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click Create replication instance.&lt;/p&gt;

    &lt;p&gt;{% imgx assets/step2-create-replication-awshw-devrel0622.png %}&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fill out a Name, Amazon Resource Name (ARN), description. You may use whichever shape you like, but keep in mind performance:cost here. Engine version should be fine, as well as storage (unless you have a truly massive database, in which case adjust accordingly).&lt;/p&gt;

    &lt;p&gt;{% imgx assets/arn-form-repinstance-awshw-devrel0622.png %}&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For VPC, choose one you have previously set up with the appropriate access controls for development work. And make sure it is publicly accessible. For Multi AZ, we’ll use a single availability zone, dev or test workload.&lt;/p&gt;

    &lt;p&gt;{% imgx assets/step4-vpcsetup-awshw-devrel0622.png %}&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click to open the Advanced security and network configurations. The subnet group will follow the VPC you chose above, and the availability zone should be US-East. The security groups should be populated with any you created earlier, ensuring ports are available (LINK TK to DOCS on this).&lt;/p&gt;

    &lt;p&gt;{% imgx assets/step5-advanc-netsec-awshw-devrel0622.png %}&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It will take a few minutes for the replication instance to spin up. Coffee time!&lt;/p&gt;

    &lt;p&gt;{% imgx assets/step6-creating-instance-awshw-wpex-devrel0622.png %}&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once it’s ready, we’ll need to get the Public IP address for our endpoint. Go to the Endpoints section. On the right you’ll see a Create Endpoint button, click it.&lt;/p&gt;

    &lt;p&gt;{% imgx assets/step7a-awsdms-endpoints-awshw-wpex-devrel0622.png %} {% imgx assets/step7b-create-endpoint-button-awshw-wpex-devrel0622.png %}&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select Source endpoint, and check Select RDS DB Instance. You should see the RDS Instance field populate with what’s available to you.&lt;/p&gt;

    &lt;p&gt;{% imgx assets/step8-create-endpoint-awshw-wpex-devrel0622.png %}&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For Endpoint configuration, you’ll have the identifier, ARN, and source engine pre-filled, but we want to provide the access to endpoint database information manually, so click that radio button. Then, enter the appropriate database information for the db you’re moving over.&lt;/p&gt;

    &lt;p&gt;{% imgx assets/step9-endpoint-config-awshw-devrel0622.png %}&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then, you should be able to test the endpoint connection below.&lt;/p&gt;

    &lt;p&gt;{% imgx assets/step10-testendpoint-awshw-wpex-devrel0622.png %}&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now, we’ll create a second endpoint as our destination.
To do this, we return to the MySQL HeatWave on AWS Console, and click MySQL DB Systems.&lt;/p&gt;

    &lt;p&gt;{% imgx assets/step11-mysql-dbsystems-onaws-awshw-wpex-devrel0622.png %}&lt;/p&gt;

    &lt;p&gt;Then, click on the DB System you wish to use, and in Summary you will find the Host Name. Copy the string.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Go back to AWS console, and click to create another endpoint. Except this time we’ll create a Target endpoint! Naturally.&lt;/p&gt;

    &lt;p&gt;{% imgx assets/step12-create-endpoint-aws-awshw-wpex-devrel0622.png %}&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In Endpoint configuration, give it a name (identifier), choose MySQL under Target Engine. ARN is optional.&lt;/p&gt;

    &lt;p&gt;{% imgx assets/step13-target-engin-awshw-wpex-devrel0622.png %}&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once again, we’ll provide access information manually. The server name is the host name you previously copied. Port is 3306. The username/password will match the one you created for the target database.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now you have your endpoint, username/password, and can use this when creating a HeatWave on AWS cluster to connect a DB System and run queries. Refer to the HeatWave on AWS documentation for more.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; MySQL Shell is the recommended utility for exporting data from a source MySQL Server and importing it into a DB System on the MySQL HeatWave on AWS. MySQL Shell dump and load utilities are purpose- built for use with MySQL DB Systems. For more on running queries with HeatWave, please refer to the &lt;a href=&quot;https://dev.mysql.com/doc/heatwave/en/heatwave-running-queries.html&quot;&gt;MySQL documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Want to know more? Join the discussion in our &lt;a href=&quot;https://bit.ly/devrel_slack&quot;&gt;public Slack channel&lt;/a&gt;!&lt;/p&gt;</content>
      

      
      
      
      
      

      <author>
          <name>Victor Agreda</name>
        
        
      </author>

      
        
          <category term="cloudapps" />
        
      

      
        <category term="mysql" />
      
        <category term="database" />
      
        <category term="heatwave" />
      
      <summary type="html">A quick example of how you can move data over for use in MySQL HeatWave on AWS.</summary>

      
      
    </entry>
  
    <entry>
      

      <title type="html">Connecting To and Managing HeatWave on AWS</title>
      <link href="https://cool.devo.build/tutorials/connecting-managing-heatwave-aws-devrel0622" rel="alternate" type="text/html" title="Connecting To and Managing HeatWave on AWS" />
      <published>2022-06-16T17:00:00+00:00</published>
      <updated>2022-06-16T17:00:00+00:00</updated>
      <id>https://cool.devo.build/tutorials/connecting-managing-heatwave-aws-devrel0622</id>
      
      
        <content type="html" xml:base="https://cool.devo.build/tutorials/connecting-managing-heatwave-aws-devrel0622">&lt;p&gt;It’s a multi-cloud world today, and that’s why MySQL HeatWave for Amazon Web Service gives you a massively parallel, high performance, in-memory query accelerator for the MySQL Database Service as a fully managed service, developed and supported by the MySQL team in Oracle. This accelerates MySQL performance by orders of magnitude for combined analytics and transactional workloads (OLAP and OLTP).&lt;/p&gt;

&lt;picture class=&quot;&quot;&gt;
                &lt;source srcset=&quot;assets/networkdiagram-hwaws-oci-devrel0622a.png 1x&quot; /&gt;
                &lt;img loading=&quot;lazy&quot; src=&quot;assets/networkdiagram-hwaws-oci-devrel0622a.png&quot; data-original=&quot;assets/networkdiagram-hwaws-oci-devrel0622a.png&quot; /&gt;
            &lt;/picture&gt;

&lt;p&gt;Oracle designed this so developers can focus on the important things, like managing data, creating schemas, and providing highly-available applications. Oracle automates tasks such as backup, recovery, and database and operating system patching.&lt;/p&gt;

&lt;p&gt;If you’ve never heard of HeatWave, think of it as a database query accelerator with boost buttons. One of the incredible things about Oracle MySQL HeatWave is the ability to &lt;a href=&quot;https://www.oracle.com/mysql/heatwave/&quot;&gt;run analytics&lt;/a&gt; directly against your existing transactional data, so there’s no need to shuffle that data off to a separate system when you need to perform massively parallel analysis.&lt;/p&gt;

&lt;p&gt;Let’s get started!&lt;/p&gt;

&lt;p&gt;MySQL HeatWave on AWS resides in an Oracle-managed tenancy on AWS. You can access it from the browser-based HeatWave Console or from a MySQL client or application. For this article, we’ll just dip our toe in by signing in, provisioning the service, and seeing an overview of what the HeatWave Console offers.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;The MySQL HeatWave Console supports browser platforms supported by Oracle Jet, such as the following browsers and versions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Google Chrome 69 or later&lt;/li&gt;
  &lt;li&gt;Safari 12.1 or later&lt;/li&gt;
  &lt;li&gt;Firefox 62 or later&lt;/li&gt;
  &lt;li&gt;The Console does not support Firefox Private Browsing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You’ll also need an AWS account, optionally an OCI account as well.&lt;/p&gt;

&lt;p&gt;Plus, you’ll need a DB System somewhere to connect to the HeatWave instance (this could be a HeatWave cluster in an OCI tenancy, for example).&lt;/p&gt;

&lt;h2 id=&quot;signing-up&quot;&gt;Signing Up&lt;/h2&gt;

&lt;p&gt;To sign up for MySQL HeatWave on AWS (if you don’t have an Oracle account):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Navigate your browser to &lt;a href=&quot;http://cloud.mysql.com/&quot;&gt;http://cloud.mysql.com/&lt;/a&gt;. You are taken to the MySQL HeatWave on AWS welcome page.&lt;/li&gt;
  &lt;li&gt;Click Sign Up. A field is displayed for entering your email address.&lt;/li&gt;
  &lt;li&gt;Enter your email address and click Continue.
    &lt;picture class=&quot;&quot;&gt;
             &lt;source srcset=&quot;assets/welcome2-mysqlhw-signup-actname-devrel0622a.png 1x&quot; /&gt;
             &lt;img loading=&quot;lazy&quot; src=&quot;assets/welcome2-mysqlhw-signup-actname-devrel0622a.png&quot; data-original=&quot;assets/welcome2-mysqlhw-signup-actname-devrel0622a.png&quot; /&gt;
         &lt;/picture&gt;
    &lt;p&gt;You are directed to an Account Information page for creating an Oracle Cloud account, which is required to use MySQL HeatWave on AWS.&lt;/p&gt;
    &lt;blockquote class=&quot;notice&quot;&gt;
      &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Do NOT change your Oracle Cloud Account name after provisioning the MySQL HeatWave on AWS service, as it can cause a loss of access to the MySQL HeatWave on AWS service, requiring Support assistance.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Enter the required information and click Verify my email. A verification email is sent to the specified address. This may take a minute!&lt;/li&gt;
  &lt;li&gt;In the verification email, click on the verification link.
 You are directed to a page for verifying the email address and providing initial account information. Follow the prompts. After providing the initial account information, you’ll go to a Get Started page in the Oracle Cloud Infrastructure (OCI) Console, which includes an Enable MySQL HeatWave on AWS link in the Quickstarts section of the page.&lt;/li&gt;
  &lt;li&gt;Click Enable MySQL HeatWave on AWS.&lt;br /&gt;
You are directed to a MySQL HeatWave on AWS Administration page where you are presented with a dialog that guides you through the setup process.
    &lt;picture class=&quot;&quot;&gt;
             &lt;source srcset=&quot;assets/hwaws-quickstart-enablehwaws-devrel0622a.png 1x&quot; /&gt;
             &lt;img loading=&quot;lazy&quot; src=&quot;assets/hwaws-quickstart-enablehwaws-devrel0622a.png&quot; data-original=&quot;assets/hwaws-quickstart-enablehwaws-devrel0622a.png&quot; /&gt;
         &lt;/picture&gt;
  &lt;/li&gt;
  &lt;li&gt;A paid account is required to use MySQL HeatWave on AWS. Follow the prompts to complete the account upgrade process. You will be prompted to select an account type and payment method. When the upgrade process is complete, you are directed to the OCI Console.
    &lt;picture class=&quot;&quot;&gt;
             &lt;source srcset=&quot;assets/upgd-awshw-account-reqscrn-devrel0622.png 1x&quot; /&gt;
             &lt;img loading=&quot;lazy&quot; src=&quot;assets/upgd-awshw-account-reqscrn-devrel0622.png&quot; data-original=&quot;assets/upgd-awshw-account-reqscrn-devrel0622.png&quot; /&gt;
         &lt;/picture&gt;
  &lt;/li&gt;
  &lt;li&gt;From the OCI Console navigation menu, select Databases. MySQL HeatWave on AWS appears on the Home tab under the Featured label.&lt;/li&gt;
  &lt;li&gt;Under MySQL HeatWave on AWS, click Administration. You are returned to the setup dialog.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click Provision to provision MySQL HeatWave on AWS.&lt;/p&gt;

    &lt;p&gt;After the provisioning operation is completed, a message appears stating that MySQL HeatWave on AWS is ready and you are presented with options to open the MySQL HeatWave console, set up users, and view billing information.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;for-those-with-an-existing-oracle-account&quot;&gt;For those with an existing Oracle account&lt;/h3&gt;

&lt;p&gt;MySQL HeatWave on AWS requires a subscription to the US East (Ashburn) region on OCI. MySQL HeatWave on AWS is integrated with OCI in the US East (Ashburn) region for identity and access management and billing. You are billed for the MySQL HeatWave on AWS Service in the US East (Ashburn) region.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Navigate your browser to &lt;a href=&quot;http://cloud.mysql.com/&quot;&gt;http://cloud.mysql.com/&lt;/a&gt;.&lt;br /&gt;
You are taken to the MySQL HeatWave on AWS welcome page.&lt;/li&gt;
  &lt;li&gt;Enter your Oracle Cloud Account name and click Continue.&lt;br /&gt;
You are directed to a Get Started page in the Oracle Cloud Infrastructure (OCI) Console, which includes an Enable MySQL HeatWave on AWS link in the Quickstarts section of the page.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click Enable MySQL HeatWave on AWS.&lt;br /&gt;
You are directed to a MySQL HeatWave on AWS Administration page where you are presented with a dialog that guides you through the setup process.&lt;/p&gt;

    &lt;blockquote class=&quot;warn&quot;&gt;
      &lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; A paid account is required to use MySQL HeatWave on AWS. If you do not have a paid account, follow the prompts to compete the account upgrade process. You will be prompted to select an account type and payment method. When the upgrade process is complete, you are directed to the OCI Console.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;From the OCI Console navigation menu, select Databases.&lt;br /&gt;
MySQL HeatWave on AWS appears on the Home tab under the Featured label.&lt;/li&gt;
  &lt;li&gt;Under MySQL HeatWave on AWS, click Administration.&lt;br /&gt;
You’ll go back to the setup dialog.&lt;/li&gt;
  &lt;li&gt;Click Provision to provision MySQL HeatWave on AWS.
    &lt;picture class=&quot;&quot;&gt;
             &lt;source srcset=&quot;assets/provision-requpg-hwaws-setup-devrel0622a.png 1x&quot; /&gt;
             &lt;img loading=&quot;lazy&quot; src=&quot;assets/provision-requpg-hwaws-setup-devrel0622a.png&quot; data-original=&quot;assets/provision-requpg-hwaws-setup-devrel0622a.png&quot; /&gt;
         &lt;/picture&gt;

    &lt;p&gt;After the provisioning operation is completed, a message appears stating that MySQL HeatWave on AWS is ready and you are presented with options to open the MySQL HeatWave console, set up users, and view billing information.&lt;/p&gt;

    &lt;picture class=&quot;&quot;&gt;
             &lt;source srcset=&quot;assets/congrats-mysqlhwaws-openconsol-devrel0622a.png 1x&quot; /&gt;
             &lt;img loading=&quot;lazy&quot; src=&quot;assets/congrats-mysqlhwaws-openconsol-devrel0622a.png&quot; data-original=&quot;assets/congrats-mysqlhwaws-openconsol-devrel0622a.png&quot; /&gt;
         &lt;/picture&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;signing-in&quot;&gt;Signing In&lt;/h2&gt;

&lt;p&gt;To sign in to MySQL HeatWave on AWS, you must have:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Your Oracle Cloud Account name.&lt;br /&gt;
This is the Cloud Account name you chose during account signup or that was provided to you by an Account Administrator. In either case, you can find your Cloud Account name in your Oracle Cloud Account welcome email.&lt;/li&gt;
  &lt;li&gt;Your Cloud Account user name and password.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s get started!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Point your browser to &lt;a href=&quot;http://cloud.mysql.com/&quot;&gt;http://cloud.mysql.com/&lt;/a&gt;&lt;br /&gt;
You are taken to the MySQL HeatWave on AWS welcome page. You’re familiar by now with this screen.&lt;/li&gt;
  &lt;li&gt;Enter your Cloud Account name.&lt;/li&gt;
  &lt;li&gt;Click Continue.
You are directed to the Oracle Cloud Account Sign In dialog.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enter your user name and password and click Sign In.&lt;/p&gt;

    &lt;p&gt;Once your user name and password are authenticated, you are directed to the HeatWave Console. Eventually you’ll need to create users and groups (for various levels of access control), and luckily you can access the Oracle Identity Cloud Service from the MySQL HEatWave on AWS Console:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;Sign into the HeatWave Console as an Account Administrator.&lt;/li&gt;
      &lt;li&gt;From the profile menu, select Administration.&lt;br /&gt;
You are directed to the MySQL HeatWave on AWS Administration page in the OCI Console.&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Select Identity Service.&lt;/p&gt;

        &lt;p&gt;This will take you to the Identity section in the OCI Account Center.&lt;/p&gt;

        &lt;picture class=&quot;&quot;&gt;
          &lt;source srcset=&quot;assets/mysqlhw-awsconsole-2view-signin-devrel0622a.png 1x&quot; /&gt;
          &lt;img loading=&quot;lazy&quot; src=&quot;assets/mysqlhw-awsconsole-2view-signin-devrel0622a.png&quot; data-original=&quot;assets/mysqlhw-awsconsole-2view-signin-devrel0622a.png&quot; /&gt;
      &lt;/picture&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s Next?&lt;/h2&gt;

&lt;p&gt;From here, you can log into the MySQL HeatWave on AWS Console and create a MySQL DB System, manage them, see HeatWave Clusters, Workspaces (where you can create and run queries), and Performance (analytics) to see how efficient HeatWave is.&lt;/p&gt;

&lt;picture class=&quot;&quot;&gt;
                &lt;source srcset=&quot;assets/1-mysql-heatwave-on-aws-console-devrel-fy2361022.png 1x&quot; /&gt;
                &lt;img loading=&quot;lazy&quot; src=&quot;assets/1-mysql-heatwave-on-aws-console-devrel-fy2361022.png&quot; data-original=&quot;assets/1-mysql-heatwave-on-aws-console-devrel-fy2361022.png&quot; /&gt;
            &lt;/picture&gt;

&lt;h3 id=&quot;connecting-to-a-db-system-in-workspaces&quot;&gt;Connecting to a DB System in Workspaces&lt;/h3&gt;

&lt;p&gt;By now you’ve got MySQL HeatWave on AWS provisioned, and you want to connect it to a DB System somewhere. We do this in the Workspaces tab in the console.&lt;/p&gt;

&lt;p&gt;A Connection Information dialog will appear, and you choose a DB System from the drop-down, enter the proper username/password combo, and click Connect.&lt;/p&gt;

&lt;h3 id=&quot;managing-heatwave-cluster-data&quot;&gt;Managing HeatWave Cluster Data&lt;/h3&gt;

&lt;p&gt;Also in the Workspaces tab, we can use the Console to load or unload data from a HeatWave cluster. Here’s how:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In the DB System workspace, expand the Manage Data in HeatWave pane.&lt;/li&gt;
  &lt;li&gt;Select the databases and tables that you want to load or unload. Databases are selected in the Databases pane. When a database is selected, the tables from the selected database appear in the Tables from selected databases pane.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There’s lots to see there but we’re interested in selecting the tables we want to load or unload, so click Load into HeatWave or Unload from HeatWave.&lt;/p&gt;

    &lt;p&gt;If you’re loading tables, the MySQL Auto Parallel Load tables into Heatwave dialog appears, providing a summary of the load operation about to happen.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click Load Tables to start the parallel load operation.&lt;/p&gt;

    &lt;p&gt;To stop a load or unload operation, click Stop Load/Unload.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The Refresh button refreshes the page, displaying the current state of databases and tables loaded in HeatWave.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;creating-backups&quot;&gt;Creating Backups&lt;/h3&gt;

&lt;p&gt;To create a DB System backup:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In the HeatWave Console, select the MySQL DB Systems tab. Under MySQL, select DB Systems.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the list of DB Systems, find the DB System you want to create a backup for, and do one of the following:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Click on the row of the DB System to highlight it, and choose Create Backup from the Actions menu.&lt;/li&gt;
      &lt;li&gt;Click the name of the DB System to open the DB System Details page. Click Create Backup. The Create Backup dialog is displayed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Edit the fields as required:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Display Name: The name of the backup.&lt;br /&gt;
If you do not define a name, one is generated in the format &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DB-System-Name - Backup - Date&amp;amp;Time&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;Description: The description of the backup.&lt;br /&gt;
If you do not define a description, one is generated in the format &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DB-System-Name - Manual Backup - Date&amp;amp;Time&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Click Create to create the backup.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;maintenance&quot;&gt;Maintenance&lt;/h3&gt;

&lt;p&gt;Good news! Essential patching and maintenance of MySQL DB Systems is an automatic process. Patches of the underlying operating system, update versions (-uN) of the MySQL server, and any underlying hardware are performed during the Maintenance Window defined on the DB System. A Maintenance Window Start Time is defined for you, automatically, and can be viewed on the DB System Details page in the MySQL HeatWave on AWS Console.&lt;/p&gt;

&lt;p&gt;When maintenance is performed, your DB System’s status changes to UPDATING and the DB System may be unavailable for a short time while the maintenance completes.&lt;/p&gt;

&lt;p&gt;Such maintenance is performed infrequently, and only when absolutely necessary. This is usually for security or reliability issues.&lt;/p&gt;

&lt;h3 id=&quot;upgrading-mysql-server&quot;&gt;Upgrading MySQL Server&lt;/h3&gt;

&lt;p&gt;Use the Console to manually upgrade the MySQL Server of your DB system.&lt;/p&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; It is recommended to perform a full backup of your DB system before upgrading.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;In the HeatWave Console, select the MySQL DB Systems tab.&lt;/li&gt;
  &lt;li&gt;Under MySQL, select DB Systems.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Find the DB system you want to upgrade, and do one of the following:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Click on the row of the DB System to highlight it, and choose Edit MySQL Version from the Actions menu. If this option is not enabled, your DB system is already using the latest version of the MySQL Server.&lt;/li&gt;
      &lt;li&gt;Click the name of the DB System to open the DB System Details page. Click Edit MySQL Version. If this button is not enabled, your DB system is already using the latest version of the MySQL Server.
 The Edit MySQL Version dialog is displayed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;In the Edit MySQL Version, select the required MySQL version.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click Save Changes.&lt;/p&gt;

    &lt;p&gt;The DB system enters the UPDATING state while the MySQL Server is upgraded.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;managing-a-heatwave-cluster&quot;&gt;Managing a HeatWave Cluster&lt;/h3&gt;

&lt;p&gt;When a HeatWave cluster is stopped through a stop or restart action, the data loaded in HeatWave cluster memory is lost.&lt;/p&gt;

&lt;h3 id=&quot;starting-stopping-or-restarting-a-heatwave-cluster&quot;&gt;Starting, stopping, or restarting a HeatWave Cluster&lt;/h3&gt;

&lt;p&gt;These actions have no effect on the DB System to which the HeatWave cluster is attached. However, start, stop, or restart actions on the DB System also affect the attached HeatWave cluster. When a HeatWave cluster is stopped as a result of a stop or restart action on the DB System, any data that was loaded on the HeatWave cluster must be reloaded when the HeatWave cluster is restarted.&lt;/p&gt;

&lt;p&gt;To start, stop, or restart a HeatWave cluster:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In the HeatWave Console, select the HeatWave Clusters tab.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the list of HeatWave clusters, find the HeatWave cluster you want to start, stop, or restart, and do one of the following:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Click on the row of the HeatWave cluster to highlight it, and choose the required action from the Actions menu.&lt;/li&gt;
      &lt;li&gt;Click the name of the HeatWave cluster to open the HeatWave Cluster Details page. On this page you can stop, start, or restart the HeatWave cluster.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select one of the following actions:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Start: Starts a stopped HeatWave cluster. After the HeatWave cluster is started, the Stop action is enabled and the Start option is disabled.&lt;/li&gt;
      &lt;li&gt;Stop: Stops a running HeatWave cluster. After the HeatWave cluster is stopped, the Start action is enabled.&lt;/li&gt;
      &lt;li&gt;Restart: Shuts down a HeatWave cluster and restarts it.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;deleting-a-heatwave-cluster&quot;&gt;Deleting a HeatWave Cluster&lt;/h3&gt;

&lt;p&gt;Deleting a HeatWave cluster removes the HeatWave cluster nodes permanently. The DB System to which the HeatWave cluster is attached is unaffected. Perhaps you just want to crunch some data for a bit, while keeping costs low. Bear in mind, the cluster will need to be set up from scratch again after deletion, so there’s that.&lt;/p&gt;

&lt;p&gt;To delete a HeatWave cluster:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In the HeatWave Console, select the HeatWave Clusters tab.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the list of HeatWave clusters, find the HeatWave cluster you want to delete, and do one of the following:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Click on the row of the HeatWave cluster to highlight it, and choose the Delete action from the Actions menu.&lt;/li&gt;
      &lt;li&gt;Click the name of the HeatWave cluster to open the HeatWave Cluster Details page. Click the Delete button.
 The Delete HeatWave Cluster dialog is displayed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Click Delete HeatWave cluster.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s a top-level overview of getting your HeatWave on AWS set up, and a little bit of management.&lt;/p&gt;

&lt;p&gt;Want to know more? Join the discussion in our &lt;a href=&quot;https://bit.ly/devrel_slack&quot;&gt;public Slack channel&lt;/a&gt;!&lt;/p&gt;</content>
      

      
      
      
      
      

      <author>
          <name>Victor Agreda</name>
        
        
      </author>

      
        
          <category term="cloudapps" />
        
      

      
        <category term="mysql" />
      
        <category term="database" />
      
        <category term="heatwave" />
      
        <category term="aws" />
      
      <summary type="html">Getting signed up, signed on, and some basic management tasks for your HeatWave on AWS cluster.</summary>

      
      
    </entry>
  
    <entry>
      

      <title type="html">Creating a Simple Chatbot using NodeJS on OCI</title>
      <link href="https://cool.devo.build/tutorials/create-simple-chatbot-nodejs-oci" rel="alternate" type="text/html" title="Creating a Simple Chatbot using NodeJS on OCI" />
      <published>2022-05-26T19:42:00+00:00</published>
      <updated>2022-05-26T19:42:00+00:00</updated>
      <id>https://cool.devo.build/tutorials/create-simple-chatbot-nodejs-oci</id>
      
      
        <content type="html" xml:base="https://cool.devo.build/tutorials/create-simple-chatbot-nodejs-oci">&lt;h2 id=&quot;introduction-why-this&quot;&gt;Introduction: Why this?&lt;/h2&gt;

&lt;picture class=&quot;&quot;&gt;
                &lt;source srcset=&quot;assets/racterexaemplasdfsdfsdf.jpg 1x&quot; /&gt;
                &lt;img loading=&quot;lazy&quot; src=&quot;assets/racterexaemplasdfsdfsdf.jpg&quot; data-original=&quot;assets/racterexaemplasdfsdfsdf.jpg&quot; /&gt;
            &lt;/picture&gt;

&lt;p&gt;When I started this project I wanted to make a Racter-like chatbot. For those who don’t remember, Racter was a weird little text “conversation simulator” released in the 1980s by publisher Mindscape, known for educational software. I wound up playing quite a bit on my dad’s Apple //c instead of my computer because his had a printer, and you could print out conversations – presumably to share them with friends. A literal “share sheet,” if you will.&lt;/p&gt;

&lt;picture class=&quot;&quot;&gt;
                &lt;source srcset=&quot;assets/apple2cvhanodejsasdfsd.jpg 1x&quot; /&gt;
                &lt;img loading=&quot;lazy&quot; src=&quot;assets/apple2cvhanodejsasdfsd.jpg&quot; data-original=&quot;assets/apple2cvhanodejsasdfsd.jpg&quot; /&gt;
            &lt;/picture&gt;

&lt;p&gt;However, what I wound up doing is establishing the beginnings of a home assistant. Racter is pretty outdated tech, as it just takes nouns you say and adds them into sentences. Very much like Mad Libs, but weirder. You can actually &lt;a href=&quot;https://www.myabandonware.com/game/racter-4m/play-4m&quot;&gt;try out Racter on the Abandonware site&lt;/a&gt;. Let’s face it, home assistants are much more conversational and practical these days.&lt;/p&gt;

&lt;p&gt;I have a mix of IOT devices in my home, but have lately become a fan of open source projects that integrate the disparate platforms (Amazon, Apple, and Google, primarily) and increase privacy. To start, I looked around for some existing “chatbots” and found &lt;a href=&quot;https://github.com/Programmer101N/chatbot_nodejs&quot;&gt;this clever implementation&lt;/a&gt; by &lt;a href=&quot;https://github.com/Programmer101N&quot;&gt;Naman Baranwall&lt;/a&gt;, which uses a little bit of training to choose the best response. Obviously we’ll be adding to this later, but for now, I wanted to show how to get this up and running on Oracle Cloud Infrastructure (OCI). It was honestly a lot easier than I thought it would be! But note that we’re going for the shortest distance between two points, and that’s getting the application running using NodeJS. If this were a production environment, we’d likely use bastions and some stricter access controls. All in good time!&lt;/p&gt;

&lt;h2 id=&quot;pre-requisites&quot;&gt;Pre-Requisites&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;OCI Free Tier account&lt;/li&gt;
  &lt;li&gt;Wait, that’s it???&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may want a GitHub account if you want to branch the project as I did for extension later, but honestly this is all so simple you’ll be amazed.&lt;/p&gt;

&lt;h2 id=&quot;steps&quot;&gt;Steps&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create a compartment&lt;/p&gt;

    &lt;p&gt;Menu: Identity and Security &amp;gt; Instances&lt;/p&gt;

    &lt;picture class=&quot;&quot;&gt;
            &lt;source srcset=&quot;assets/2instancesinmycompartment.png 1x&quot; /&gt;
            &lt;img loading=&quot;lazy&quot; src=&quot;assets/2instancesinmycompartment.png&quot; data-original=&quot;assets/2instancesinmycompartment.png&quot; /&gt;
        &lt;/picture&gt;

    &lt;p&gt;The point is that we’re not messing about in our root compartment, just as we like to avoid mucking about in root on our personal machine, right? I created a very simple compartment and just made the parent my root, but I also used this for my Virtual Cloud Network (VCN) so I can connect later. Identity and Security is also where you would create users, groups, and all manner of access controls. But, it’s just little ol’ us, so we’ll just go in as admins.&lt;/p&gt;

    &lt;picture class=&quot;&quot;&gt;
            &lt;source srcset=&quot;assets/2createinstanceinmycompartment.png 1x&quot; /&gt;
            &lt;img loading=&quot;lazy&quot; src=&quot;assets/2createinstanceinmycompartment.png&quot; data-original=&quot;assets/2createinstanceinmycompartment.png&quot; /&gt;
        &lt;/picture&gt;

    &lt;picture class=&quot;&quot;&gt;
            &lt;source srcset=&quot;assets/2createcompartmentchatbotnodejs.png 1x&quot; /&gt;
            &lt;img loading=&quot;lazy&quot; src=&quot;assets/2createcompartmentchatbotnodejs.png&quot; data-original=&quot;assets/2createcompartmentchatbotnodejs.png&quot; /&gt;
        &lt;/picture&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a VCN if you don’t have one&lt;/p&gt;

    &lt;p&gt;Menu: Networking &amp;gt; Virtual Cloud Networks&lt;/p&gt;

    &lt;p&gt;This is where my advance prep of a compartment came in handy, as I’d already set up a VCN using default route tables and it has a public IP so I can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; in later. VCN’s are really powerful, but for our purposes all we need is a subnet and a public IP to steer to, all of which is easy to set up using the tool provided. Of course, almost all of these things can be automated using something like Terraform, but we’re just testing a chatbot for ourselves today.&lt;/p&gt;

    &lt;picture class=&quot;&quot;&gt;
            &lt;source srcset=&quot;assets/vcnsinmycompartmentnodejsproj.png 1x&quot; /&gt;
            &lt;img loading=&quot;lazy&quot; src=&quot;assets/vcnsinmycompartmentnodejsproj.png&quot; data-original=&quot;assets/vcnsinmycompartmentnodejsproj.png&quot; /&gt;
        &lt;/picture&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a compute instance&lt;/p&gt;

    &lt;p&gt;Menu: Compute &amp;gt; Instances&lt;/p&gt;

    &lt;p&gt;Here’s where things get streamlined. Oracle does a good job of choosing a general purpose shape, but we’re going to adjust it so it’s free-tier and connecting to the Internet.&lt;/p&gt;

    &lt;picture class=&quot;&quot;&gt;
            &lt;source srcset=&quot;assets/2createcomputeinstancechatbotproj.png 1x&quot; /&gt;
            &lt;img loading=&quot;lazy&quot; src=&quot;assets/2createcomputeinstancechatbotproj.png&quot; data-original=&quot;assets/2createcomputeinstancechatbotproj.png&quot; /&gt;
        &lt;/picture&gt;

    &lt;p&gt;Instead of AMD, we’ll go with Ampere, an exceptionally good value (free-tier, remember?) just click on change shape…&lt;/p&gt;

    &lt;picture class=&quot;&quot;&gt;
            &lt;source srcset=&quot;assets/2amdchangeshapeinocicompute.png 1x&quot; /&gt;
            &lt;img loading=&quot;lazy&quot; src=&quot;assets/2amdchangeshapeinocicompute.png&quot; data-original=&quot;assets/2amdchangeshapeinocicompute.png&quot; /&gt;
        &lt;/picture&gt;

    &lt;p&gt;Also, don’t forget to change the memory to 8GB&lt;/p&gt;

    &lt;picture class=&quot;&quot;&gt;
            &lt;source srcset=&quot;assets/2amperealwaysfreecomputeshapetouse.png 1x&quot; /&gt;
            &lt;img loading=&quot;lazy&quot; src=&quot;assets/2amperealwaysfreecomputeshapetouse.png&quot; data-original=&quot;assets/2amperealwaysfreecomputeshapetouse.png&quot; /&gt;
        &lt;/picture&gt;

    &lt;p&gt;As you scroll down, you’ll see that our previous VCN is available, how handy! That means we can assign a public IP to this fellow and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; in shortly.&lt;/p&gt;

    &lt;picture class=&quot;&quot;&gt;
            &lt;source srcset=&quot;assets/2computewizardnetworkingpart.png 1x&quot; /&gt;
            &lt;img loading=&quot;lazy&quot; src=&quot;assets/2computewizardnetworkingpart.png&quot; data-original=&quot;assets/2computewizardnetworkingpart.png&quot; /&gt;
        &lt;/picture&gt;

    &lt;p&gt;And to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; in, we’ll need the private key, which I just generate right here while I’m spinning up my compute, and of course save it and the public key somewhere safe (more on this in a bit).&lt;/p&gt;

    &lt;p&gt;I personally provision 50GB of storage, but you don’t have to as OCI will provision some block memory to start with.&lt;/p&gt;

    &lt;picture class=&quot;&quot;&gt;
            &lt;source srcset=&quot;assets/2privpubkeysandstorage.png 1x&quot; /&gt;
            &lt;img loading=&quot;lazy&quot; src=&quot;assets/2privpubkeysandstorage.png&quot; data-original=&quot;assets/2privpubkeysandstorage.png&quot; /&gt;
        &lt;/picture&gt;

    &lt;p&gt;&lt;em&gt;NOTE: You can save these as a stack for later use as well, which is also handy.&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;To review, we’ve just taken 3 steps to spin up a publicly-available free-tier compute instance so we can start creating our dev environment and chances are you haven’t even finished that beverage sitting too close to your keyboard!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Connecting to our compute instance&lt;/p&gt;

    &lt;p&gt;It’ll take a minute for the compute instance to spin up, but when it does, the panel will show you the public IP, which you’ll need to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; in.&lt;/p&gt;

    &lt;p&gt;Menu: Compute &amp;gt; Instances &amp;gt; Instance Details&lt;/p&gt;

    &lt;p&gt;There’s even a handy copy link!&lt;/p&gt;

    &lt;picture class=&quot;&quot;&gt;
            &lt;source srcset=&quot;assets/2computepubipexampleco.png 1x&quot; /&gt;
            &lt;img loading=&quot;lazy&quot; src=&quot;assets/2computepubipexampleco.png&quot; data-original=&quot;assets/2computepubipexampleco.png&quot; /&gt;
        &lt;/picture&gt;

    &lt;p&gt;I’m using Terminal on my Mac, so I &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt; over to where I’m storing my private key, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod 400&lt;/code&gt; it, then:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;ssh -i &amp;lt;path to private key&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;opc@&amp;lt;public IP address&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;And of course, when prompted by security, you want to continue connecting, which will add you to the list of known hosts and you’re off to the races!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Installing what we need&lt;/p&gt;

    &lt;p&gt;As we’re using nodejs, we’ll want to install it and then create a folder for our project, then initialize a repo in that folder to install our modules. We’ll also set up some text files with code and parameters.&lt;/p&gt;

    &lt;p&gt;Oracle has a nifty &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yum&lt;/code&gt; repo for NodeJS and all we need to do is install the latest NodeJS using this command:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;sudo yum install nodejs
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Navigate to your home folder, and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opc&lt;/code&gt; (the admin user for this VM), and create a folder for your project. Like the tutorial, I named mine &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chatbot_nodejs&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;I branched the repo beforehand so I could extend it a bit later, but either way we initialize it in that folder with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm init&lt;/code&gt; and use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm i node-nlp&lt;/code&gt; to install the appropriate modules.&lt;/p&gt;

    &lt;p&gt;Note that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file will look for an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.js&lt;/code&gt; file, and we add two scripts: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;train.js&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.js&lt;/code&gt;, plus the repo for our dependencies.&lt;/p&gt;

    &lt;picture class=&quot;&quot;&gt;
            &lt;source srcset=&quot;assets/packagejsonfileshownchatbot.png 1x&quot; /&gt;
            &lt;img loading=&quot;lazy&quot; src=&quot;assets/packagejsonfileshownchatbot.png&quot; data-original=&quot;assets/packagejsonfileshownchatbot.png&quot; /&gt;
        &lt;/picture&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Writing and testing&lt;/p&gt;

    &lt;p&gt;The way all of this works is by storing a set of “intents” as questions and responses, then using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node-nlp&lt;/code&gt; module to weigh responses over time.&lt;/p&gt;

    &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;train.js&lt;/code&gt; file is where we have the code to actually teach our model. We also create an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.js&lt;/code&gt; file, which will get everything loaded and set up – it’s pretty simple right now, but has the capacity to extend itself to a more conversant home assistant in the future.&lt;/p&gt;

    &lt;p&gt;As you can see in &lt;a href=&quot;https://medium.com/geekculture/create-chatbot-with-nodejs-cf3d8bc3f302&quot;&gt;the article&lt;/a&gt;, we import the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NlpManager&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node-nlp&lt;/code&gt; so we can save and process what goes on, then create a new instance of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NlpManager&lt;/code&gt; class, read input from the terminal, send it to the manager for a response, and then display that response.&lt;/p&gt;

    &lt;p&gt;Nothing too fancy just yet, but we’re laying some important groundwork. The term “intent” here is very specific, referring to the natural language processing (NLP) we’re using to train our system. This can be used in many ways, from knowing preferences to avoiding specific words to understanding what a person is saying better over time. Just like it reads, “intent” is what the person is trying to say. You can &lt;a href=&quot;https://medium.com/mysuperai/what-is-intent-recognition-and-how-can-i-use-it-9ceb35055c4f&quot;&gt;read more about intent recognition in this excellent piece by Christopher Marshall&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;The model needs something to start with, so we create a couple of documents in our intents folder (inside our project folder): one for “hello” and one for “goodbye.” The author creates a set of questions and answers, which can, of course, be as long as you like. I took the liberty of changing a few, including one that calls me “FNAME” as an homage to the days when I would get press releases gone horribly awry on the database side. If you know, you know.&lt;/p&gt;

    &lt;p&gt;You could create many of these to accomodate frequent queries like weather, sports, news, etc., and then create data agents who fetch what you need and return it using phrases that (over time) will be weighed for preference and ultimately “converse” in a more natural way. Integrating live data is something we’d love to do here, but we’ll wait to do this another day.&lt;/p&gt;

    &lt;p&gt;Once I fixed my own minor syntax errors (check those commas, people!), the whole thing worked just as expected. First you run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;train&lt;/code&gt; to get the module initialized and ready (you’ll see a bunch of timing to let you know it’s doing the work), then run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;start&lt;/code&gt; to get the chatbot chatting.&lt;/p&gt;

    &lt;picture class=&quot;&quot;&gt;
            &lt;source srcset=&quot;assets/chatbotactuallyworkingnodejs34.png 1x&quot; /&gt;
            &lt;img loading=&quot;lazy&quot; src=&quot;assets/chatbotactuallyworkingnodejs34.png&quot; data-original=&quot;assets/chatbotactuallyworkingnodejs34.png&quot; /&gt;
        &lt;/picture&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;next-steps-iot&quot;&gt;Next Steps: IOT&lt;/h2&gt;

&lt;p&gt;OK, maybe not the very next step, but eventually this could become my own little Siri or Alexa, running in OCI, tied to systems in my house, capable of giving me whatever information I need on request. Sort of like a certain comic book character who came to life on screen not too long ago…&lt;/p&gt;

&lt;p&gt;You can try all this for yourself by setting up a free tier account, and reviewing &lt;a href=&quot;https://medium.com/geekculture/create-chatbot-with-nodejs-cf3d8bc3f302&quot;&gt;the article&lt;/a&gt; for the chatbot code. 
Join us on our &lt;a href=&quot;https://bit.ly/devrel_slack&quot;&gt;public Slack&lt;/a&gt; if you do some cool stuff with it!&lt;/p&gt;</content>
      

      
      
      
      
      

      <author>
          <name>Victor Agreda</name>
        
        
      </author>

      
        
          <category term="frameworks" />
        
          <category term="cloudapps" />
        
      

      
        <category term="open-source" />
      
        <category term="oci" />
      
        <category term="nodejs" />
      
      <summary type="html">A very basic chatbot using nodejs on an oracle cloud compute instance.</summary>

      
      
    </entry>
  
</feed>
